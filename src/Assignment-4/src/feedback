See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  FAILED (0 errors, 1 warning)
API:          PASSED

Spotbugs:     FAILED (2 warnings)
PMD:          FAILED (19 warnings)
Checkstyle:   FAILED (0 errors, 31 warnings)

Correctness:  39/51 tests passed
Memory:       0/22 tests passed
Timing:       125/125 tests passed

Aggregate score: 70.88%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
7.4K Feb  9 02:55 Board.java
3.8K Feb  9 02:55 Solver.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac Board.java
*-----------------------------------------------------------
Board.java:196: warning: [cast] redundant cast to int
        s.append(String.format("%2d ", (int)blocks[k]));
                                       ^
1 warning

% javac Solver.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Board:

Solver:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
M V EI_EXPOSE_REP2 EI2: Stores a reference to an externally mutable object in the instance variable 'iniBlocks', exposing the internal representation of the class 'Board'. Instead, create a defensive copy of the object referenced by the parameter variable 'iniBlocks' and store that copy in the instance variable 'iniBlocks'.  At Board.java:[line 25]
L P URF_UNREAD_FIELD UrF: The instance (or static) variable 'iniBlocks' is never read. Consider removing it from the class.  At Board.java:[line 25]
Warnings generated: 2


================================================================


% pmd .
*-----------------------------------------------------------
Board.java:7: You should not need to define more than one array instance variable in this program. [AtMostOneArrayInstanceVariable]
Board.java:9: Avoid unused private instance (or static) variables, such as 'iniBlocks'. [UnusedPrivateField]
Board.java:9: Can you replace the instance (or static) variable 'iniBlocks' with a local variable? [SingularField]
Board.java:10: The private instance (or static) variable 'blocks' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Board.java:11: The private instance (or static) variable 'N' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Board.java:12: The private instance (or static) variable 'manhattan' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Board.java:21: The user-supplied array 'iniBlocks' is stored directly. [ArrayIsStoredDirectly]
Board.java:150: Do not call 'Arrays.equal()' with a multi-dimensional array. Instead, call 'Arrays.deepEquals()'. [ArrayEqualsWithMultidimensionalArray]
Solver.java:7: The private instance (or static) variable 'initial' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:8: The private instance (or static) variable 'goalBoard' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:9: Can you replace the instance (or static) variable 'dimension' with a local variable? [SingularField]
Solver.java:9: The private instance (or static) variable 'dimension' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:10: The private instance (or static) variable 'pq' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:11: The private instance (or static) variable 'pqTwin' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:65: The private instance (or static) variable 'board' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:66: The private instance (or static) variable 'moves' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:67: The private instance (or static) variable 'priority' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:68: The private instance (or static) variable 'previousNode' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:127: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
PMD ends with 19 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] Board.java:9:9: The modifier 'private' is out of order. The preferred order is ['public', 'protected', 'private', 'abstract', 'static', 'final', 'transient', 'volatile', 'synchronized', 'native', and 'strictfp']. [ModifierOrder]
[WARN] Board.java:11:15: The instance variable 'N' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Board.java:150:42: Typecast is not followed by whitespace. [WhitespaceAfter]
[WARN] Board.java:161:7: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] Board.java:163:23: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] Board.java:166:7: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] Board.java:168:25: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] Board.java:171:7: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] Board.java:173:25: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] Board.java:176:7: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] Board.java:178:26: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] Board.java:196:45: Typecast is not followed by whitespace. [WhitespaceAfter]
[WARN] Board.java:211:29: The local (or parameter) variable 'blocks' has the same name as an instance variable. Use a different name. [HiddenField]
[WARN] Board.java:216:31: The local (or parameter) variable 'blocks' has the same name as an instance variable. Use a different name. [HiddenField]
[WARN] Board.java:221:31: The local (or parameter) variable 'blocks' has the same name as an instance variable. Use a different name. [HiddenField]
[WARN] Board.java:226:32: The local (or parameter) variable 'blocks' has the same name as an instance variable. Use a different name. [HiddenField]
[WARN] Board.java:231:36: The local (or parameter) variable 'blocks' has the same name as an instance variable. Use a different name. [HiddenField]
[WARN] Board.java:233:13: The local variable 'blocks_2D' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] Board.java:241:36: The local (or parameter) variable 'iniBlocks' has the same name as an instance variable. Use a different name. [HiddenField]
[WARN] Board.java:243:11: The local (or parameter) variable 'blocks' has the same name as an instance variable. Use a different name. [HiddenField]
[WARN] Board.java:263:9: The local variable 'N' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] Solver.java:2:8: Unused import statement for 'edu.princeton.cs.algs4.Queue'. [UnusedImports]
[WARN] Solver.java:31:10: 'while' is not followed by whitespace. [WhitespaceAfter]
[WARN] Solver.java:52:34: The local (or parameter) variable 'dimension' has the same name as an instance variable. Use a different name. [HiddenField]
[WARN] Solver.java:101:7: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] Solver.java:112:7: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] Solver.java:115:32: '!=' is not preceded with whitespace. [WhitespaceAround]
[WARN] Solver.java:115:34: '!=' is not followed by whitespace. [WhitespaceAround]
Checkstyle ends with 0 errors and 28 warnings.

% custom checkstyle checks for Board.java
*-----------------------------------------------------------

% custom checkstyle checks for Solver.java
*-----------------------------------------------------------
[WARN] Solver.java:1: You should use 'isGoal()' to check whether a board is the goal board. [MethodCallCount]
[WARN] Solver.java:10:11: Can you make the variable of type 'MinPQ' a local variable instead of an instance (or static) variable? [Design]
[WARN] Solver.java:11:11: Can you make the variable of type 'MinPQ' a local variable instead of an instance (or static) variable? [Design]
Checkstyle ends with 0 errors and 3 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Board
*-----------------------------------------------------------
Running 26 total tests.

Tests 4-7 and 14-17 rely upon toString() returning results in prescribed format.

Test 1a: check hamming() with file inputs
  * puzzle04.txt
    - student   hamming() = 5
    - reference hamming() = 4
        3
         0  1  3
         4  2  5
         7  8  6


  * puzzle00.txt
    - student   hamming() = 1
    - reference hamming() = 0
        10
         1  2  3  4  5  6  7  8  9 10
        11 12 13 14 15 16 17 18 19 20
        21 22 23 24 25 26 27 28 29 30
        31 32 33 34 35 36 37 38 39 40
        41 42 43 44 45 46 47 48 49 50
        51 52 53 54 55 56 57 58 59 60
        61 62 63 64 65 66 67 68 69 70
        71 72 73 74 75 76 77 78 79 80
        81 82 83 84 85 86 87 88 89 90
        91 92 93 94 95 96 97 98 99  0


  * puzzle07.txt
    - student   hamming() = 5
    - reference hamming() = 4
        3
         1  2  3
         0  7  6
         5  4  8


  * puzzle17.txt
    - student   hamming() = 9
    - reference hamming() = 8
        3
         5  1  8
         2  7  3
         4  0  6


  * puzzle27.txt
    - student   hamming() = 8
    - reference hamming() = 7
        3
         5  8  7
         1  4  6
         3  0  2


  * puzzle2x2-unsolvable1.txt
    - student   hamming() = 3
    - reference hamming() = 2
        2
         1  0
         2  3


==> FAILED

Test 1b: check hamming() with random n-by-n boards
  * 2-by-2
    - student   hamming() = 4
    - reference hamming() = 3
        2
         2  3
         1  0


    - failed on trial 1 of 1000

  * 3-by-3
    - student   hamming() = 6
    - reference hamming() = 5
        3
         1  8  3
         0  2  6
         5  7  4


    - failed on trial 1 of 1000

  * 4-by-4
    - student   hamming() = 15
    - reference hamming() = 14
        4
         5  0  7 11
        12  2 10  1
         8 13  3 14
         4  9 15  6


    - failed on trial 1 of 1000

  * 5-by-5
    - student   hamming() = 25
    - reference hamming() = 24
        5
        17 12  9 20 24
         5 13 10 21  0
        23 19  2 15  1
         3 11 22 16  4
         8 14 18  7  6


    - failed on trial 1 of 1000

  * 9-by-9
    - student   hamming() = 81
    - reference hamming() = 80
        9
        71 56 75 55 49 50  4 29 60
        14 34 51 19 65 28 69 20  9
        22  8 64 76 13  2  6 61 79
         7 21 68 23 53 16 25 66 32
         5 26  0 59 38 63 47 74 58
        39 12 17 18 70 43 78 48  1
        73 11 40 36 15 77 42 72 80
        46 52 54 41 33 44 57 30 10
        45 27 35 37 62  3 31 24 67


    - failed on trial 1 of 1000

  * 10-by-10
    - student   hamming() = 98
    - reference hamming() = 97
        10
        66 50  6 18 26 38 96 55 64  5
        48 22 84 35 14 67 99 12  0 37
        74 59 44 54 19 77 15 94 53 24
        49 68 92 80 57 60 28 25 13 34
        82 31  8  3  1 42 47 20 52 70
        39 88 36  9 97  4 72 32 58 43
        73 61 30 93 11 81 69 29 46 33
        51 40 83 21 85 62 65 78 71 91
        75 23 10  7 95 79 16 76 45 56
        89 17 90 86 63 27 87  2 41 98


    - failed on trial 1 of 1000

  * 127-by-127
    - student   hamming() = 16128
    - reference hamming() = 16127

    - failed on trial 1 of 10

==> FAILED

Test 2a: check manhattan() with file inputs
  * puzzle04.txt
    - student   manhattan() = 6
    - reference manhattan() = 4
        3
         0  1  3
         4  2  5
         7  8  6


  * puzzle00.txt
  * puzzle07.txt
    - student   manhattan() = 9
    - reference manhattan() = 7
        3
         1  2  3
         0  7  6
         5  4  8


  * puzzle17.txt
  * puzzle27.txt
    - student   manhattan() = 15
    - reference manhattan() = 17
        3
         5  8  7
         1  4  6
         3  0  2


  * puzzle2x2-unsolvable1.txt
==> FAILED

Test 2b: check manhattan() with random n-by-n boards
  * 2-by-2
    - student   manhattan() = 3
    - reference manhattan() = 4
        2
         0  3
         1  2


    - failed on trial 1 of 1000

  * 3-by-3
    - student   manhattan() = 16
    - reference manhattan() = 10
        3
         7  6  3
         1  0  5
         4  2  8


    - failed on trial 1 of 1000

  * 4-by-4
    - student   manhattan() = 49
    - reference manhattan() = 48
        4
        14 11  1 10
         9 15 13  5
         7  4  0  3
         6 12  8  2


    - failed on trial 1 of 1000

  * 5-by-5
    - student   manhattan() = 84
    - reference manhattan() = 80
        5
        15 17 10 18  8
        13  2 24  6 22
        11  5 12 23 20
         7  1 21  0 19
         3  4 14 16  9


    - failed on trial 1 of 1000

  * 9-by-9
    - student   manhattan() = 446
    - reference manhattan() = 456
        9
        41 21 74 56  0 71 23 47 40
        13 49 17 35 37 72 32 19 11
        51  6 60  1 57 54 77 33 76
        18 12 14 55 80 78 52  8 43
        38  9 20 15 64 36 45 42 62
        27 68 28 10 24 70 34 50 63
        44 61 39  2 25 58  4 31  7
        67 69 30  3 59 48 65 29 46
        75 79 66 22 26 16  5 53 73


    - failed on trial 1 of 1000

  * 10-by-10
    - student   manhattan() = 642
    - reference manhattan() = 607
        10
        75 44 31 49 20 45 37 22 76 58
        13 24 89 12 27 30 84 54 88  9
        83  6 51 85 15  8 35 16 82 57
        52 72 39 36  7 46 40 67 95 38
        86 63 28 21 47 66 79 90 56 65
        78 87 94 60 77 71 74 18 32  3
        64 62 42 97 10 70 50  0 11 99
         2 25 23 29 96 68 98 26 92 41
        73 80 34 14 48  1 55 53 59 17
        19 33 81 91 93  5 61  4 69 43


    - failed on trial 1 of 1000

  * 127-by-127
    - student   manhattan() = 1366705
    - reference manhattan() = 1366831

    - failed on trial 1 of 10

==> FAILED

Test 3: check dimension() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
==> passed

Test 4a: check toString() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 4b: check toString() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 5a: check neighbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 5b: check neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 6a: check neighbors() of neighbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 6b: check neighbors() of neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
==> passed

Test 7a: check twin() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
    java.lang.ArrayIndexOutOfBoundsException: 4

    Board.twin(Board.java:123)
    TestBoard.checkTwin(TestBoard.java:663)
    TestBoard.checkTwin(TestBoard.java:714)
    TestBoard.test7a(TestBoard.java:1466)
    TestBoard.main(TestBoard.java:1685)

==> FAILED

Test 7b: check twin() with random n-by-n boards
  * 2-by-2
    java.lang.ArrayIndexOutOfBoundsException: -1

    Board.twin(Board.java:117)
    TestBoard.checkTwin(TestBoard.java:663)
    TestBoard.checkTwin(TestBoard.java:699)
    TestBoard.test7b(TestBoard.java:1473)
    TestBoard.main(TestBoard.java:1686)

    - failed on trial 3 of 1000

  * 3-by-3
    java.lang.ArrayIndexOutOfBoundsException: -1

    Board.twin(Board.java:117)
    TestBoard.checkTwin(TestBoard.java:663)
    TestBoard.checkTwin(TestBoard.java:699)
    TestBoard.test7b(TestBoard.java:1474)
    TestBoard.main(TestBoard.java:1686)

    - failed on trial 14 of 1000

  * 4-by-4
    java.lang.ArrayIndexOutOfBoundsException: 16

    Board.twin(Board.java:123)
    TestBoard.checkTwin(TestBoard.java:663)
    TestBoard.checkTwin(TestBoard.java:699)
    TestBoard.test7b(TestBoard.java:1475)
    TestBoard.main(TestBoard.java:1686)

    - failed on trial 3 of 1000

  * 5-by-5
    java.lang.ArrayIndexOutOfBoundsException: -1

    Board.twin(Board.java:117)
    TestBoard.checkTwin(TestBoard.java:663)
    TestBoard.checkTwin(TestBoard.java:699)
    TestBoard.test7b(TestBoard.java:1476)
    TestBoard.main(TestBoard.java:1686)

    - failed on trial 43 of 1000

  * 9-by-9
  * 10-by-10
==> FAILED

Test 8a: check isGoal() with file inputs
  * puzzle00.txt
  * puzzle04.txt
  * puzzle16.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-00.txt
  * puzzle4x4-00.txt
==> passed

Test 8b: check isGoal() on n-by-n goal boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
  * 100-by-100
==> passed

Test 9: check that two Board objects can be created at the same time
  * random 3-by-3 and 3-by-3 boards
  * random 4-by-4 and 4-by-4 boards
  * random 2-by-2 and 2-by-2 boards
  * random 3-by-3 and 4-by-4 boards
  * random 4-by-4 and 3-by-3 boards
==> passed

Test 10a: check equals()
  * reflexive
  * symmetric
  * transitive
  * argument is null
  * argument is of type String
  * argument is of type UncastableString
  * Board object stored in a variable of type Object
==> passed

Test 10b: check correctness of equals() on random n-by-n boards
  * n = 2
  * n = 3
  * n = 4
  * 5 <= n < 10
==> passed

Test 10c: check equals() when board sizes m and n are different
  * m = 4, n = 5
  * m = 2, n = 5
  * m = 5, n = 3
  * m = 2, n = 3
  * m = 3, n = 2
==> passed

Test 11: check that Board is immutable by changing argument array after
         construction and making sure Board does not mutate
==> passed

Test 12: check that Board is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle10.txt
    - failed after 34 calls to random methods in Board
    - first call to twin() =
        9
         1  2  3  4  5  6  7  8  9
        10 11 12 13 14 15 16 17 18
        19 20 21 22 23 24 25 26 27
        28 29 30 31 32 33 34 35 36
        37 38 39 40 41 42 43 44 45
        46 47 48 49 50 51 52 53 54
        55 56 57 58 59 60 61 62 63
        64  0 65 67 68 78 70 69 72
        73 74 66 75 76 77 79 71 80

    - last  call to twin() =
        9
         1  2  3  4  5  6  7  8  9
        10 11 12 13 14 15 16 17 18
        19 20 22 21 23 24 25 26 27
        28 29 30 31 32 33 34 35 36
        37 38 39 40 41 42 43 44 45
        46 47 48 49 50 51 52 53 54
        55 56 57 58 59 60 61 62 63
        64  0 65 67 68 78 69 70 72
        73 74 66 75 76 77 79 71 80

    - twin1.equals(twin2) = false
    - twin2.equals(twin1) = false

    - failed after 36 calls to random methods in Board
    - first call to twin() =
        9
         1  2  3  4  5  6  7  8  9
        10 11 12 13 14 15 16 17 18
        19 20 21 22 23 24 25 26 27
        28 29 30 31 32 33 34 35 36
        37 38 39 40 41 42 43 44 45
        46 47 48 49 50 51 52 53 54
        55 56 57 58 59 60 61 62 63
        64  0 65 67 68 78 70 69 72
        73 74 66 75 76 77 79 71 80

    - last  call to twin() =
        9
         1  2  3  4  5  6  7  8  9
        10 11 12 13 14 15 16 17 18
        19 20 21 22 23 24 25 26 27
        28 29 30 31 32 33 34 35 36
        37 38 39 40 41 42 43 44 45
        46 47 48 49 50 51 52 53 54
        55 56 57 58 59 60 61 62 63
        64  0 65 67 68 78 69 70 80
        73 74 66 75 76 77 79 71 72

    - twin1.equals(twin2) = false
    - twin2.equals(twin1) = false

    - failed after 40 calls to random methods in Board
    - first call to twin() =
        9
         1  2  3  4  5  6  7  8  9
        10 11 12 13 14 15 16 17 18
        19 20 21 22 23 24 25 26 27
        28 29 30 31 32 33 34 35 36
        37 38 39 40 41 42 43 44 45
        46 47 48 49 50 51 52 53 54
        55 56 57 58 59 60 61 62 63
        64  0 65 67 68 78 70 69 72
        73 74 66 75 76 77 79 71 80

    - last  call to twin() =
        9
         1  2  3  4  5  6  7  8  9
        10 11 12 13 14 15 16 17 18
        19 20 21 22 23 24 25 26 27
        28 29 30 31 32 33 34 35 36
        37 38 39 40 41 42 43 44 45
        46 47 48 49 50 51 52 53 54
        55 56 57 58 59 60 61 62 64
        63  0 65 67 68 78 69 70 72
        73 74 66 75 76 77 79 71 80

    - twin1.equals(twin2) = false
    - twin2.equals(twin1) = false

    - failed after 41 calls to random methods in Board
    - first call to twin() =
        9
         1  2  3  4  5  6  7  8  9
        10 11 12 13 14 15 16 17 18
        19 20 21 22 23 24 25 26 27
        28 29 30 31 32 33 34 35 36
        37 38 39 40 41 42 43 44 45
        46 47 48 49 50 51 52 53 54
        55 56 57 58 59 60 61 62 63
        64  0 65 67 68 78 70 69 72
        73 74 66 75 76 77 79 71 80

    - last  call to twin() =
        9
         1  2  3  4  5  6  7  8  9
        10 11 12 13 14 15 16 17 18
        19 20 21 22 23 25 24 26 27
        28 29 30 31 32 33 34 35 36
        37 38 39 40 41 42 43 44 45
        46 47 48 49 50 51 52 53 54
        55 56 57 58 59 60 61 62 63
        64  0 65 67 68 78 69 70 72
        73 74 66 75 76 77 79 71 80

    - twin1.equals(twin2) = false
    - twin2.equals(twin1) = false

    - failed after 43 calls to random methods in Board
    - first call to twin() =
        9
         1  2  3  4  5  6  7  8  9
        10 11 12 13 14 15 16 17 18
        19 20 21 22 23 24 25 26 27
        28 29 30 31 32 33 34 35 36
        37 38 39 40 41 42 43 44 45
        46 47 48 49 50 51 52 53 54
        55 56 57 58 59 60 61 62 63
        64  0 65 67 68 78 70 69 72
        73 74 66 75 76 77 79 71 80

    - last  call to twin() =
        9
         1  2  3  4  5  6  7  8  9
        10 11 12 13 14 15 16 17 18
        19 20 21 22 23 24 25 26 27
        28 29 30 31 32 33 34 35 36
        37 38 39 40 41 42 43 44 45
        46 47 48 49 50 51 52 53 54
        55 56 57 58 59 60 61 62 63
        64  0 66 67 68 78 69 70 72
        73 74 65 75 76 77 79 71 80

    - twin1.equals(twin2) = false
    - twin2.equals(twin1) = false

    - failed after 65 calls to random methods in Board
    - first call to twin() =
        9
         1  2  3  4  5  6  7  8  9
        10 11 12 13 14 15 16 17 18
        19 20 21 22 23 24 25 26 27
        28 29 30 31 32 33 34 35 36
        37 38 39 40 41 42 43 44 45
        46 47 48 49 50 51 52 53 54
        55 56 57 58 59 60 61 62 63
        64  0 65 67 68 78 70 69 72
        73 74 66 75 76 77 79 71 80

    - last  call to twin() =
        9
         1  2  3  5  4  6  7  8  9
        10 11 12 13 14 15 16 17 18
        19 20 21 22 23 24 25 26 27
        28 29 30 31 32 33 34 35 36
        37 38 39 40 41 42 43 44 45
        46 47 48 49 50 51 52 53 54
        55 56 57 58 59 60 61 62 63
        64  0 65 67 68 78 69 70 72
        73 74 66 75 76 77 79 71 80

    - twin1.equals(twin2) = false
    - twin2.equals(twin1) = false

    - failed after 81 calls to random methods in Board
    - first call to twin() =
        9
         1  2  3  4  5  6  7  8  9
        10 11 12 13 14 15 16 17 18
        19 20 21 22 23 24 25 26 27
        28 29 30 31 32 33 34 35 36
        37 38 39 40 41 42 43 44 45
        46 47 48 49 50 51 52 53 54
        55 56 57 58 59 60 61 62 63
        64  0 65 67 68 78 70 69 72
        73 74 66 75 76 77 79 71 80

    - last  call to twin() =
        9
         2  1  3  4  5  6  7  8  9
        10 11 12 13 14 15 16 17 18
        19 20 21 22 23 24 25 26 27
        28 29 30 31 32 33 34 35 36
        37 38 39 40 41 42 43 44 45
        46 47 48 49 50 51 52 53 54
        55 56 57 58 59 60 61 62 63
        64  0 65 67 68 78 69 70 72
        73 74 66 75 76 77 79 71 80

    - twin1.equals(twin2) = false
    - twin2.equals(twin1) = false

    - failed after 93 calls to random methods in Board
    - first call to twin() =
        9
         1  2  3  4  5  6  7  8  9
        10 11 12 13 14 15 16 17 18
        19 20 21 22 23 24 25 26 27
        28 29 30 31 32 33 34 35 36
        37 38 39 40 41 42 43 44 45
        46 47 48 49 50 51 52 53 54
        55 56 57 58 59 60 61 62 63
        64  0 65 67 68 78 70 69 72
        73 74 66 75 76 77 79 71 80

    - last  call to twin() =
        9
         1  2  3  4  5  6  7  8  9
        10 11 12 13 14 15 16 17 18
        19 20 21 22 23 24 25 26 27
        28 29 30 31 32 33 34 35 36
        37 38 39 40 41 42 43 44 45
        46 47 48 49 50 51 52 53 54
        56 55 57 58 59 60 61 62 63
        64  0 65 67 68 78 69 70 72
        73 74 66 75 76 77 79 71 80

    - twin1.equals(twin2) = false
    - twin2.equals(twin1) = false

    - failed after 94 calls to random methods in Board
    - first call to twin() =
        9
         1  2  3  4  5  6  7  8  9
        10 11 12 13 14 15 16 17 18
        19 20 21 22 23 24 25 26 27
        28 29 30 31 32 33 34 35 36
        37 38 39 40 41 42 43 44 45
        46 47 48 49 50 51 52 53 54
        55 56 57 58 59 60 61 62 63
        64  0 65 67 68 78 70 69 72
        73 74 66 75 76 77 79 71 80

    - last  call to twin() =
        9
         1  2  3  4  5  6  7  8  9
        10 11 12 13 14 15 16 26 18
        19 20 21 22 23 24 25 17 27
        28 29 30 31 32 33 34 35 36
        37 38 39 40 41 42 43 44 45
        46 47 48 49 50 51 52 53 54
        55 56 57 58 59 60 61 62 63
        64  0 65 67 68 78 69 70 72
        73 74 66 75 76 77 79 71 80

    - twin1.equals(twin2) = false
    - twin2.equals(twin1) = false

  * puzzle20.txt
    - failed after 8 calls to random methods in Board
    - first call to twin() =
        3
         1  6  4
         7  0  2
         8  3  5

    - last  call to twin() =
        3
         1  6  4
         2  0  8
         7  3  5

    - twin1.equals(twin2) = false
    - twin2.equals(twin1) = false
    - sequence of Board operations was:
         Board board = new Board(tiles)
         board.equals(other) ==> false
         board.toString()
         board.twin()
         board.equals(other) ==> true
         board.manhattan()   ==> 18
         board.hamming()     ==> 8
         board.isGoal()      ==> false
         board.twin()

    - failed after 28 calls to random methods in Board
    - first call to twin() =
        3
         1  6  4
         7  0  2
         8  3  5

    - last  call to twin() =
        3
         6  1  4
         7  0  8
         2  3  5

    - twin1.equals(twin2) = false
    - twin2.equals(twin1) = false

    java.lang.ArrayIndexOutOfBoundsException: 9

    Board.twin(Board.java:123)
    TestBoard.checkImmutableBoard(TestBoard.java:1227)
    TestBoard.checkImmutableBoard(TestBoard.java:1314)
    TestBoard.test12(TestBoard.java:1596)
    TestBoard.main(TestBoard.java:1694)


  * puzzle30.txt
    - failed after 16 calls to random methods in Board
    - first call to twin() =
        3
         8  4  7
         1  5  6
         2  3  0

    - last  call to twin() =
        3
         4  8  7
         1  5  6
         3  2  0

    - twin1.equals(twin2) = false
    - twin2.equals(twin1) = false

    - failed after 27 calls to random methods in Board
    - first call to twin() =
        3
         8  4  7
         1  5  6
         2  3  0

    - last  call to twin() =
        3
         4  8  7
         1  5  6
         3  2  0

    - twin1.equals(twin2) = false
    - twin2.equals(twin1) = false

    - failed after 44 calls to random methods in Board
    - first call to twin() =
        3
         8  4  7
         1  5  6
         2  3  0

    - last  call to twin() =
        3
         8  4  7
         1  5  3
         6  2  0

    - twin1.equals(twin2) = false
    - twin2.equals(twin1) = false

    - failed after 49 calls to random methods in Board
    - first call to twin() =
        3
         8  4  7
         1  5  6
         2  3  0

    - last  call to twin() =
        3
         8  4  6
         1  5  7
         3  2  0

    - twin1.equals(twin2) = false
    - twin2.equals(twin1) = false

    - failed after 51 calls to random methods in Board
    - first call to twin() =
        3
         8  4  7
         1  5  6
         2  3  0

    - last  call to twin() =
        3
         8  5  7
         1  4  6
         3  2  0

    - twin1.equals(twin2) = false
    - twin2.equals(twin1) = false

    - failed after 53 calls to random methods in Board
    - first call to twin() =
        3
         8  4  7
         1  5  6
         2  3  0

    - last  call to twin() =
        3
         4  8  7
         1  5  6
         3  2  0

    - twin1.equals(twin2) = false
    - twin2.equals(twin1) = false

    - failed after 63 calls to random methods in Board
    - first call to twin() =
        3
         8  4  7
         1  5  6
         2  3  0

    - last  call to twin() =
        3
         8  5  7
         1  4  6
         3  2  0

    - twin1.equals(twin2) = false
    - twin2.equals(twin1) = false

    - failed after 65 calls to random methods in Board
    - first call to twin() =
        3
         8  4  7
         1  5  6
         2  3  0

    - last  call to twin() =
        3
         4  8  7
         1  5  6
         3  2  0

    - twin1.equals(twin2) = false
    - twin2.equals(twin1) = false

    - failed after 70 calls to random methods in Board
    - first call to twin() =
        3
         8  4  7
         1  5  6
         2  3  0

    - last  call to twin() =
        3
         8  4  7
         1  5  3
         6  2  0

    - twin1.equals(twin2) = false
    - twin2.equals(twin1) = false

    - failed after 74 calls to random methods in Board
    - first call to twin() =
        3
         8  4  7
         1  5  6
         2  3  0

    - last  call to twin() =
        3
         8  4  6
         1  5  7
         3  2  0

    - twin1.equals(twin2) = false
    - twin2.equals(twin1) = false

  * 2-by-2
    java.lang.ArrayIndexOutOfBoundsException: -1

    Board.twin(Board.java:117)
    TestBoard.checkImmutableBoard(TestBoard.java:1227)
    TestBoard.checkImmutableBoard(TestBoard.java:1299)
    TestBoard.test12(TestBoard.java:1598)
    TestBoard.main(TestBoard.java:1694)

    - sequence of Board operations was:
         Board board = new Board(tiles)
         board.neighbors()
         board.toString()
         board.toString()
         board.equals(other) ==> false
         board.equals(other) ==> false
         board.isGoal()      ==> false
         board.neighbors()
         board.neighbors()
         board.manhattan()   ==> 4
         board.neighbors()
         board.twin()

    - failed on trial 1 of 100

  * 3-by-3
    - failed after 24 calls to random methods in Board
    - first call to twin() =
        3
         6  3  4
         8  7  1
         2  5  0

    - last  call to twin() =
        3
         3  6  4
         8  7  1
         5  2  0

    - twin1.equals(twin2) = false
    - twin2.equals(twin1) = false

    - failed after 27 calls to random methods in Board
    - first call to twin() =
        3
         6  3  4
         8  7  1
         2  5  0

    - last  call to twin() =
        3
         3  6  1
         8  7  4
         2  5  0

    - twin1.equals(twin2) = false
    - twin2.equals(twin1) = false

    - failed after 57 calls to random methods in Board
    - first call to twin() =
        3
         6  3  4
         8  7  1
         2  5  0

    - last  call to twin() =
        3
         3  7  4
         8  6  1
         2  5  0

    - twin1.equals(twin2) = false
    - twin2.equals(twin1) = false

    java.lang.ArrayIndexOutOfBoundsException: -1

    Board.twin(Board.java:117)
    TestBoard.checkImmutableBoard(TestBoard.java:1227)
    TestBoard.checkImmutableBoard(TestBoard.java:1299)
    TestBoard.test12(TestBoard.java:1599)
    TestBoard.main(TestBoard.java:1694)


    - failed on trial 1 of 100

  * 4-by-4
    - failed after 15 calls to random methods in Board
    - first call to twin() =
        4
         3  5 15  0
         6  7  2  4
        11  9 13  8
        14  1 12 10

    - last  call to twin() =
        4
         6  5 15  0
         3  7  2  4
        14  9 13  8
        11  1 12 10

    - twin1.equals(twin2) = false
    - twin2.equals(twin1) = false

    - failed after 24 calls to random methods in Board
    - first call to twin() =
        4
         3  5 15  0
         6  7  2  4
        11  9 13  8
        14  1 12 10

    - last  call to twin() =
        4
         3  5 15  0
         6  7  2  8
        14  9 13  4
        11  1 12 10

    - twin1.equals(twin2) = false
    - twin2.equals(twin1) = false

    - failed after 32 calls to random methods in Board
    - first call to twin() =
        4
         3  5 15  0
         6  7  2  4
        11  9 13  8
        14  1 12 10

    - last  call to twin() =
        4
         3  5 15  0
         6  7  2  4
        14  9 13  8
         1 11 12 10

    - twin1.equals(twin2) = false
    - twin2.equals(twin1) = false

    - failed after 45 calls to random methods in Board
    - first call to twin() =
        4
         3  5 15  0
         6  7  2  4
        11  9 13  8
        14  1 12 10

    - last  call to twin() =
        4
         3  5 15  0
         6  7  2  4
        14  9 12  8
        11  1 13 10

    - twin1.equals(twin2) = false
    - twin2.equals(twin1) = false

    - failed after 51 calls to random methods in Board
    - first call to twin() =
        4
         3  5 15  0
         6  7  2  4
        11  9 13  8
        14  1 12 10

    - last  call to twin() =
        4
         3  5 15  0
         6  7  2  4
        14 13  9  8
        11  1 12 10

    - twin1.equals(twin2) = false
    - twin2.equals(twin1) = false

    - failed after 100 calls to random methods in Board
    - first call to twin() =
        4
         3  5 15  0
         6  7  2  4
        11  9 13  8
        14  1 12 10

    - last  call to twin() =
        4
         3  5 15  0
         6  7  2  4
         9 14 13  8
        11  1 12 10

    - twin1.equals(twin2) = false
    - twin2.equals(twin1) = false

    java.lang.ArrayIndexOutOfBoundsException: 16

    Board.twin(Board.java:123)
    TestBoard.checkImmutableBoard(TestBoard.java:1227)
    TestBoard.checkImmutableBoard(TestBoard.java:1299)
    TestBoard.test12(TestBoard.java:1600)
    TestBoard.main(TestBoard.java:1694)


    - failed on trial 2 of 100

==> FAILED

Test 13: check dimension() on a board that is kth neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1st neighbor of puzzle27.txt
  * 2nd neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed

Test 14: check hamming() on a board that is kth neighbor of a board
  * 0th neighbor of puzzle27.txt
    - student   hamming() = 8
    - reference hamming() = 7
        3
         5  8  7
         1  4  6
         3  0  2


  * 1st neighbor of puzzle27.txt
    - student   hamming() = 8
    - reference hamming() = 7
        3
         5  8  7
         1  4  6
         3  2  0


  * 2nd neighbor of puzzle27.txt
    - student   hamming() = 9
    - reference hamming() = 8
        3
         5  8  7
         1  6  0
         3  4  2


  * 13th neighbor of puzzle27.txt
    - student   hamming() = 9
    - reference hamming() = 8
        3
         5  8  7
         1  6  2
         3  4  0


  * 13th neighbor of puzzle00.txt
    - student   hamming() = 4
    - reference hamming() = 3
        10
         1  2  3  4  5  6  7  8  9 10
        11 12 13 14 15 16 17 18 19 20
        21 22 23 24 25 26 27 28 29 30
        31 32 33 34 35 36 37 38 39 40
        41 42 43 44 45 46 47 48 49 50
        51 52 53 54 55 56 57 58 59 60
        61 62 63 64 65 66 67 68 69 70
        71 72 73 74 75 76 77 78  0 79
        81 82 83 84 85 86 87 88 89 80
        91 92 93 94 95 96 97 98 99 90


  * 13th neighbor of puzzle2x2-unsolvable1.txt
    - student   hamming() = 3
    - reference hamming() = 2
        2
         2  1
         3  0


==> FAILED

Test 15: check manhattan() on a board that is a kth neighbor of a board
  * 0th neighbor of puzzle27.txt
    - student   manhattan() = 15
    - reference manhattan() = 17
        3
         5  8  7
         1  4  6
         3  0  2


  * 1st neighbor of puzzle27.txt
    - student   manhattan() = 16
    - reference manhattan() = 18
        3
         5  8  7
         1  0  6
         3  4  2


  * 2nd neighbor of puzzle27.txt
    - student   manhattan() = 15
    - reference manhattan() = 17
        3
         5  8  7
         1  4  6
         3  0  2


  * 13th neighbor of puzzle27.txt
    - student   manhattan() = 16
    - reference manhattan() = 18
        3
         0  8  7
         5  1  6
         3  4  2


  * 13th neighbor of puzzle00.txt
    - student   manhattan() = 12
    - reference manhattan() = 3
        10
         1  2  3  4  5  6  7  8  9 10
        11 12 13 14 15 16 17 18 19 20
        21 22 23 24 25 26 27 28 29 30
        31 32 33 34 35 36 37 38 39 40
        41 42 43 44 45 46 47 48 49 50
        51 52 53 54 55 56 57 58 59 60
        61 62 63 64 65 66 67 68 69 70
        71 72 73 74 75 76 77 78  0 80
        81 82 83 84 85 86 87 88 79 90
        91 92 93 94 95 96 97 98 89 99


  * 13th neighbor of puzzle2x2-unsolvable1.txt
    - student   manhattan() = 3
    - reference manhattan() = 4
        2
         0  3
         1  2


==> FAILED

Test 16: check hamming() on a board that is a kth twin of a board
  * 0th twin of puzzle27.txt
    - student   hamming() = 8
    - reference hamming() = 7
        3
         5  8  7
         1  4  6
         3  0  2


  * 1st twin of puzzle27.txt
    - student   hamming() = 8
    - reference hamming() = 7
        3
         5  4  7
         1  8  6
         3  0  2


  * 2nd twin of puzzle27.txt
    java.lang.ArrayIndexOutOfBoundsException: 9

    Board.twin(Board.java:123)
    TestBoard.checkHammingOfTwin(TestBoard.java:403)
    TestBoard.checkHammingOfTwin(TestBoard.java:395)
    TestBoard.test16(TestBoard.java:1645)
    TestBoard.main(TestBoard.java:1698)

  * 13th twin of puzzle27.txt
    java.lang.ArrayIndexOutOfBoundsException: -1

    Board.twin(Board.java:117)
    TestBoard.checkHammingOfTwin(TestBoard.java:403)
    TestBoard.checkHammingOfTwin(TestBoard.java:395)
    TestBoard.test16(TestBoard.java:1646)
    TestBoard.main(TestBoard.java:1698)

  * 13th twin of puzzle00.txt
    - student   hamming() = 21
    - reference hamming() = 20
        10
        11  2  3  5  4  6  7  8  9 10
         1 12 13 14 15 16 17 18 19 20
        21 22 23 24 25 27 26 28 29 30
        31 33 32 34 35 36 37 38 39 40
        51 42 43 44 55 46 47 48 49 50
        41 52 53 54 45 56 57 58 59 61
        60 62 63 64 65 66 68 67 69 70
        71 72 73 74 75 76 77 78 79 91
        80 82 83 84 85 86 87 88 89 81
        90 92 93 94 95 96 97 98 99  0


  * 13th twin of puzzle2x2-unsolvable1.txt
    java.lang.ArrayIndexOutOfBoundsException: 4

    Board.twin(Board.java:123)
    TestBoard.checkHammingOfTwin(TestBoard.java:403)
    TestBoard.checkHammingOfTwin(TestBoard.java:395)
    TestBoard.test16(TestBoard.java:1648)
    TestBoard.main(TestBoard.java:1698)

==> FAILED

Test 17: check manhattan() on a board that is a kth twin of a board
  * 0th twin of puzzle27.txt
    - student   manhattan() = 15
    - reference manhattan() = 17
        3
         5  8  7
         1  4  6
         3  0  2


  * 1st twin of puzzle27.txt
    - student   manhattan() = 15
    - reference manhattan() = 17
        3
         5  4  7
         1  8  6
         3  0  2


  * 2nd twin of puzzle27.txt
  * 13th twin of puzzle27.txt
    - student   manhattan() = 13
    - reference manhattan() = 11
        3
         4  8  2
         1  7  3
         5  0  6


  * 13th twin of puzzle00.txt
  * 13th twin of puzzle2x2-unsolvable1.txt
    java.lang.ArrayIndexOutOfBoundsException: -1

    Board.twin(Board.java:117)
    TestBoard.checkManhattanOfTwin(TestBoard.java:438)
    TestBoard.checkManhattanOfTwin(TestBoard.java:430)
    TestBoard.test17(TestBoard.java:1660)
    TestBoard.main(TestBoard.java:1699)

==> FAILED


Total: 15/26 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Board
*-----------------------------------------------------------
Running 10 total tests.

Memory usage of an n-by-n board
[ must be at most 4n^2 + 32n + 64 bytes ]


              n       student (bytes)    reference (bytes)
----------------------------------------------------------
=> FAILED     2           192                  128
=> FAILED     3           280                  192
=> FAILED     4           352                  240
=> FAILED     8           864                  560
=> FAILED    12          1632                 1008
=> FAILED    16          2656                 1584
=> FAILED    20          3936                 2288
=> FAILED    37         12384                 6856
=> FAILED    72         43872                23088
=> FAILED   120        119136                61488
==> 0/10 tests passed

Total: 0/10 tests passed!

Student   memory = 8.00 n^2 + 32.00 n + 96.00   (R^2 = 1.000)
Reference memory = 4.00 n^2 + 32.00 n + 48.00   (R^2 = 1.000)

================================================================



********************************************************************************
*  TESTING CORRECTNESS (substituting reference Board)
********************************************************************************

Testing correctness of Solver
*-----------------------------------------------------------
Running 25 total tests.

Test 1a: check moves() with file inputs
  * puzzle00.txt
  * puzzle01.txt
  * puzzle02.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle06.txt
  * puzzle07.txt
  * puzzle08.txt
  * puzzle09.txt
  * puzzle10.txt
  * puzzle11.txt
  * puzzle12.txt
  * puzzle13.txt
==> passed

Test 1b: check solution() with file inputs
  * puzzle00.txt
  * puzzle01.txt
  * puzzle02.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle06.txt
  * puzzle07.txt
  * puzzle08.txt
  * puzzle09.txt
  * puzzle10.txt
  * puzzle11.txt
  * puzzle12.txt
  * puzzle13.txt
==> passed

Test 2a: check moves() with more file inputs
  * puzzle14.txt
  * puzzle15.txt
  * puzzle16.txt
  * puzzle17.txt
  * puzzle18.txt
  * puzzle19.txt
  * puzzle20.txt
  * puzzle21.txt
  * puzzle22.txt
  * puzzle23.txt
  * puzzle24.txt
  * puzzle25.txt
  * puzzle26.txt
  * puzzle27.txt
  * puzzle28.txt
  * puzzle29.txt
  * puzzle30.txt
  * puzzle31.txt
==> passed

Test 2b: check solution() with more file inputs
  * puzzle14.txt
  * puzzle15.txt
  * puzzle16.txt
  * puzzle17.txt
  * puzzle18.txt
  * puzzle19.txt
  * puzzle20.txt
  * puzzle21.txt
  * puzzle22.txt
  * puzzle23.txt
  * puzzle24.txt
  * puzzle25.txt
  * puzzle26.txt
  * puzzle27.txt
  * puzzle28.txt
  * puzzle29.txt
  * puzzle30.txt
  * puzzle31.txt
==> passed

Test 3a: check moves() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
  * 1000 random 3-by-3 boards that are exactly 2 moves from goal
  * 1000 random 3-by-3 boards that are exactly 3 moves from goal
  * 1000 random 3-by-3 boards that are exactly 4 moves from goal
  * 1000 random 3-by-3 boards that are exactly 5 moves from goal
  * 1000 random 3-by-3 boards that are exactly 6 moves from goal
  * 1000 random 3-by-3 boards that are exactly 7 moves from goal
  * 1000 random 3-by-3 boards that are exactly 8 moves from goal
  * 1000 random 3-by-3 boards that are exactly 9 moves from goal
  * 1000 random 3-by-3 boards that are exactly 10 moves from goal
  * 1000 random 3-by-3 boards that are exactly 11 moves from goal
  * 1000 random 3-by-3 boards that are exactly 12 moves from goal
==> passed

Test 3b: check solution() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
  * 1000 random 3-by-3 boards that are exactly 2 moves from goal
  * 1000 random 3-by-3 boards that are exactly 3 moves from goal
  * 1000 random 3-by-3 boards that are exactly 4 moves from goal
  * 1000 random 3-by-3 boards that are exactly 5 moves from goal
  * 1000 random 3-by-3 boards that are exactly 6 moves from goal
  * 1000 random 3-by-3 boards that are exactly 7 moves from goal
  * 1000 random 3-by-3 boards that are exactly 8 moves from goal
  * 1000 random 3-by-3 boards that are exactly 9 moves from goal
  * 1000 random 3-by-3 boards that are exactly 10 moves from goal
  * 1000 random 3-by-3 boards that are exactly 11 moves from goal
  * 1000 random 3-by-3 boards that are exactly 12 moves from goal
==> passed

Test 4: create two Solver objects at the same time
  * puzzle04.txt and puzzle04.txt
  * puzzle00.txt and puzzle04.txt
  * puzzle04.txt and puzzle00.txt
==> passed

Test 5a: call isSolvable() with file inputs
  * puzzle01.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle17.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> passed

Test 5b: call isSolvable() on random n-by-n boards
  * 100 random 2-by-2 boards
==> passed

Test 6: check moves() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
  * puzzle2x2-unsolvable2.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> passed

Test 7: check solution() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
  * puzzle2x2-unsolvable2.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> passed

Test 8a: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-05.txt
  * puzzle3x3-10.txt
  * random 2-by-2 solvable boards
==> passed

Test 8b: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
  * random 2-by-2 unsolvable boards
==> passed

Test 9a: check that equals() method in Board is called
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
==> passed

Test 9b: check that equals() method in Board is called only
         with an argument of type Board
  * puzzle00.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
==> passed

Test 9c: check that equals() method in Board is called only
         with a neighbor of a neighbor as an argument
  * puzzle00.txt
  * puzzle04.txt
    - equals() compares a board to a board that is not a neighbor of a neighbor
    - this suggests a bug in the critical optimization
    - board 1:
        3
         0  1  3
         4  2  5
         7  8  6

    - board 2:
        3
         1  2  3
         4  5  6
         7  8  0

  * puzzle05.txt
    - equals() compares a board to a board that is not a neighbor of a neighbor
    - this suggests a bug in the critical optimization
    - board 1:
        3
         4  1  3
         0  2  6
         7  5  8

    - board 2:
        3
         1  2  3
         4  5  6
         7  8  0

  * puzzle10.txt
    - equals() compares a board to a board that is not a neighbor of a neighbor
    - this suggests a bug in the critical optimization
    - board 1:
        9
         1  2  3  4  5  6  7  8  9
        10 11 12 13 14 15 16 17 18
        19 20 21 22 23 24 25 26 27
        28 29 30 31 32 33 34 35 36
        37 38 39 40 41 42 43 44 45
        46 47 48 49 50 51 52 53 54
        55 56 57 58 59 60 61 62 63
        64  0 65 67 68 78 69 70 72
        73 74 66 75 76 77 79 71 80

    - board 2:
        9
         1  2  3  4  5  6  7  8  9
        10 11 12 13 14 15 16 17 18
        19 20 21 22 23 24 25 26 27
        28 29 30 31 32 33 34 35 36
        37 38 39 40 41 42 43 44 45
        46 47 48 49 50 51 52 53 54
        55 56 57 58 59 60 61 62 63
        64 65 66 67 68 69 70 71 72
        73 74 75 76 77 78 79 80  0

  * puzzle27.txt
    - equals() compares a board to a board that is not a neighbor of a neighbor
    - this suggests a bug in the critical optimization
    - board 1:
        3
         5  8  7
         1  4  6
         3  0  2

    - board 2:
        3
         1  2  3
         4  5  6
         7  8  0

==> FAILED

Test 10: check that constructor throws exception if board is null
==> passed

Test 11a: check moves() with 2-by-2 file inputs
  * puzzle2x2-00.txt
  * puzzle2x2-01.txt
  * puzzle2x2-02.txt
  * puzzle2x2-03.txt
  * puzzle2x2-04.txt
  * puzzle2x2-05.txt
  * puzzle2x2-06.txt
==> passed

Test 11b: check solution() with 2-by-2 file inputs
  * puzzle2x2-00.txt
  * puzzle2x2-01.txt
  * puzzle2x2-02.txt
  * puzzle2x2-03.txt
  * puzzle2x2-04.txt
  * puzzle2x2-05.txt
  * puzzle2x2-06.txt
==> passed

Test 12a: check moves() with 3-by-3 file inputs
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-02.txt
  * puzzle3x3-03.txt
  * puzzle3x3-04.txt
  * puzzle3x3-05.txt
  * puzzle3x3-06.txt
  * puzzle3x3-07.txt
  * puzzle3x3-08.txt
  * puzzle3x3-09.txt
  * puzzle3x3-10.txt
  * puzzle3x3-11.txt
  * puzzle3x3-12.txt
  * puzzle3x3-13.txt
  * puzzle3x3-14.txt
  * puzzle3x3-15.txt
  * puzzle3x3-16.txt
  * puzzle3x3-17.txt
  * puzzle3x3-18.txt
  * puzzle3x3-19.txt
  * puzzle3x3-20.txt
  * puzzle3x3-21.txt
  * puzzle3x3-22.txt
  * puzzle3x3-23.txt
  * puzzle3x3-24.txt
  * puzzle3x3-25.txt
  * puzzle3x3-26.txt
  * puzzle3x3-27.txt
  * puzzle3x3-28.txt
  * puzzle3x3-29.txt
  * puzzle3x3-30.txt
==> passed

Test 12b: check solution() with 3-by-3 file inputs
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-02.txt
  * puzzle3x3-03.txt
  * puzzle3x3-04.txt
  * puzzle3x3-05.txt
  * puzzle3x3-06.txt
  * puzzle3x3-07.txt
  * puzzle3x3-08.txt
  * puzzle3x3-09.txt
  * puzzle3x3-10.txt
  * puzzle3x3-11.txt
  * puzzle3x3-12.txt
  * puzzle3x3-13.txt
  * puzzle3x3-14.txt
  * puzzle3x3-15.txt
  * puzzle3x3-16.txt
  * puzzle3x3-17.txt
  * puzzle3x3-18.txt
  * puzzle3x3-19.txt
  * puzzle3x3-20.txt
  * puzzle3x3-21.txt
  * puzzle3x3-22.txt
  * puzzle3x3-23.txt
  * puzzle3x3-24.txt
  * puzzle3x3-25.txt
  * puzzle3x3-26.txt
  * puzzle3x3-27.txt
  * puzzle3x3-28.txt
  * puzzle3x3-29.txt
  * puzzle3x3-30.txt
==> passed

Test 13a: check moves() with 4-by-4 file inputs
  * puzzle4x4-00.txt
  * puzzle4x4-01.txt
  * puzzle4x4-02.txt
  * puzzle4x4-03.txt
  * puzzle4x4-04.txt
  * puzzle4x4-05.txt
  * puzzle4x4-06.txt
  * puzzle4x4-07.txt
  * puzzle4x4-08.txt
  * puzzle4x4-09.txt
  * puzzle4x4-10.txt
  * puzzle4x4-11.txt
  * puzzle4x4-12.txt
  * puzzle4x4-13.txt
  * puzzle4x4-14.txt
  * puzzle4x4-15.txt
  * puzzle4x4-16.txt
  * puzzle4x4-17.txt
  * puzzle4x4-18.txt
  * puzzle4x4-19.txt
  * puzzle4x4-20.txt
  * puzzle4x4-21.txt
  * puzzle4x4-22.txt
  * puzzle4x4-23.txt
  * puzzle4x4-24.txt
  * puzzle4x4-25.txt
  * puzzle4x4-26.txt
  * puzzle4x4-27.txt
  * puzzle4x4-28.txt
  * puzzle4x4-29.txt
  * puzzle4x4-30.txt
==> passed

Test 13b: check solution() with 4-by-4 file inputs
  * puzzle4x4-00.txt
  * puzzle4x4-01.txt
  * puzzle4x4-02.txt
  * puzzle4x4-03.txt
  * puzzle4x4-04.txt
  * puzzle4x4-05.txt
  * puzzle4x4-06.txt
  * puzzle4x4-07.txt
  * puzzle4x4-08.txt
  * puzzle4x4-09.txt
  * puzzle4x4-10.txt
  * puzzle4x4-11.txt
  * puzzle4x4-12.txt
  * puzzle4x4-13.txt
  * puzzle4x4-14.txt
  * puzzle4x4-15.txt
  * puzzle4x4-16.txt
  * puzzle4x4-17.txt
  * puzzle4x4-18.txt
  * puzzle4x4-19.txt
  * puzzle4x4-20.txt
  * puzzle4x4-21.txt
  * puzzle4x4-22.txt
  * puzzle4x4-23.txt
  * puzzle4x4-24.txt
  * puzzle4x4-25.txt
  * puzzle4x4-26.txt
  * puzzle4x4-27.txt
  * puzzle4x4-28.txt
  * puzzle4x4-29.txt
  * puzzle4x4-30.txt
==> passed

Test 14a: check moves() with random solvable n-by-n boards
  * 100 random 2-by-2 boards that are <= 6 moves from goal
  * 200 random 3-by-3 boards that are <= 20 moves from goal
  * 200 random 4-by-4 boards that are <= 20 moves from goal
  * 200 random 5-by-5 boards that are <= 20 moves from goal
==> passed

Test 14b: check solution() with random solvable n-by-n boards
  * 100 random 2-by-2 boards that are <= 6 moves from goal
  * 200 random 3-by-3 boards that are <= 20 moves from goal
  * 200 random 4-by-4 boards that are <= 20 moves from goal
  * 200 random 5-by-5 boards that are <= 20 moves from goal
==> passed


Total: 24/25 tests passed!


================================================================
********************************************************************************
*  MEMORY (substituting reference Board)
********************************************************************************

Analyzing memory of Solver
*-----------------------------------------------------------
Running 12 total tests.

Maximum allowed time per puzzle is 5.0 seconds.
Maximum allowed memory per puzzle = 200000000 bytes.

Test 1: Measure memory of Solver.

               filename   moves   memory
---------------------------------------------
=> FAILED  puzzle10.txt      10    24408   (3.0x)
=> FAILED  puzzle15.txt      15    30528   (3.1x)
=> FAILED  puzzle20.txt      20   215688  (42.8x)
=> FAILED  puzzle25.txt      25  1551320 (249.0x)
=> FAILED  puzzle30.txt      30  6467608 (871.6x)
=> FAILED  puzzle35.txt      35  92884296 (9e+03x)
==> 0/6 tests passed



Test 2: Measure memory of MinPQ.

                              deep              max           ending
               filename     memory             size             size
--------------------------------------------------------------------
=> FAILED  puzzle10.txt      48816   (1.2x)      34               34
=> FAILED  puzzle15.txt      61056   (1.2x)      52               52
=> FAILED  puzzle20.txt     431376   (1.2x)     587              587
=> FAILED  puzzle25.txt    3102640   (1.2x)    4214             4214
=> FAILED  puzzle30.txt   12935216   (1.2x)   17038            17038
=> FAILED  puzzle35.txt  185769608   (1.2x)  271122           271122
==> 0/6 tests passed


Total: 0/12 tests passed!

================================================================



********************************************************************************
*  TIMING (substituting reference Board)
********************************************************************************

Timing Solver
*-----------------------------------------------------------
Running 125 total tests.

Maximum allowed time per puzzle is 5.0 seconds.

Test 1: Measure CPU time and check correctness

               filename   moves    n  seconds
---------------------------------------------
=> passed  puzzle20.txt      20    3     0.02
=> passed  puzzle22.txt      22    3     0.01
=> passed  puzzle21.txt      21    3     0.01
=> passed  puzzle23.txt      23    3     0.01
=> passed  puzzle24.txt      24    3     0.01
=> passed  puzzle25.txt      25    3     0.02
=> passed  puzzle27.txt      27    3     0.02
=> passed  puzzle29.txt      29    3     0.01
=> passed  puzzle26.txt      26    3     0.01
=> passed  puzzle28.txt      28    3     0.03
=> passed  puzzle30.t

...

WARNING: the grading output was truncated due to excessive length.
Typically, this is because you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception). A large amount of output
can also arise from failing many tests.