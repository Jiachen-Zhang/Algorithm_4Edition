See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     PASSED
PMD:          FAILED (2 warnings)
Checkstyle:   FAILED (0 errors, 4 warnings)

Correctness:  28/41 tests passed
Memory:       1/1 tests passed
Timing:       41/41 tests passed

Aggregate score: 80.98%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
2.2K Jan 25 09:38 BruteCollinearPoints.java
2.2K Jan 25 09:38 FastCollinearPoints.java
4.3K Jan 25 09:38 Point.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac Point.java
*-----------------------------------------------------------

% javac BruteCollinearPoints.java
*-----------------------------------------------------------

% javac FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Point:

BruteCollinearPoints:

FastCollinearPoints:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------


================================================================


% pmd .
*-----------------------------------------------------------
BruteCollinearPoints.java:6: The private instance (or static) variable 'stack' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
FastCollinearPoints.java:6: The private instance (or static) variable 'stack' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PMD ends with 2 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] BruteCollinearPoints.java:39:20: Do not use the letter 'l' as a local variable name. It is hard to distinguish from the number '1'. [LocalVariableName]
Checkstyle ends with 0 errors and 1 warning.

% custom checkstyle checks for Point.java
*-----------------------------------------------------------

% custom checkstyle checks for BruteCollinearPoints.java
*-----------------------------------------------------------
[WARN] BruteCollinearPoints.java:36:51: The numeric literal '1e-6' appears to be unnecessary. [NumericLiteral]
[WARN] BruteCollinearPoints.java:41:53: The numeric literal '1e-6' appears to be unnecessary. [NumericLiteral]
Checkstyle ends with 0 errors and 2 warnings.

% custom checkstyle checks for FastCollinearPoints.java
*-----------------------------------------------------------
[WARN] FastCollinearPoints.java:41:45: The numeric literal '1e-6' appears to be unnecessary. [NumericLiteral]
Checkstyle ends with 0 errors and 1 warning.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Point
*-----------------------------------------------------------
Running 3 total tests.

Test 1: p.slopeTo(q)
  * positive infinite slope, where p and q have coordinates in [0, 500)
  * positive infinite slope, where p and q have coordinates in [0, 32768)
  * negative infinite slope, where p and q have coordinates in [0, 500)
  * negative infinite slope, where p and q have coordinates in [0, 32768)
  * positive zero     slope, where p and q have coordinates in [0, 500)
  * positive zero     slope, where p and q have coordinates in [0, 32768)
  * symmetric for random points p and q with coordinates in [0, 500)
  * symmetric for random points p and q with coordinates in [0, 32768)
  * transitive for random points p, q, and r with coordinates in [0, 500)
  * transitive for random points p, q, and r with coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 500)
  * slopeTo(), where p and q have coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 10)
  * throw a java.lang.NullPointerException if argument is null
==> passed

Test 2: p.compareTo(q)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p and q have coordinates in [0, 500)
  * antisymmetric, where p and q have coordinates in [0, 32768)
  * transitive, where p, q, and r have coordinates in [0, 500)
  * transitive, where p, q, and r have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 500)
  * sign of compareTo(), where p and q have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 10)
  * throw java.lang.NullPointerException exception if argument is null
==> passed

Test 3: p.slopeOrder().compare(q, r)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p, q, and r have coordinates in [0, 500)
  * antisymmetric, where p, q, and r have coordinates in [0, 32768)
  * transitive, where p, q, r, and s have coordinates in [0, 500)
  * transitive, where p, q, r, and s have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 500)
  * sign of compare(), where p, q, and r have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 10)
  * throw java.lang.NullPointerException if either argument is null
==> passed


Total: 3/3 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Point and LineSegment)
********************************************************************************

Testing correctness of BruteCollinearPoints
*-----------------------------------------------------------
Running 17 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
  * filename = horizontal25.txt
==> passed

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
  *  5 random horizontal line segments
  * 10 random horizontal line segments
  * 15 random horizontal line segments
==> passed

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
  * filename = vertical25.txt
==> passed

Test 3b: random vertical line segments
  *  1 random vertical line segment
  *  5 random vertical line segments
  * 10 random vertical line segments
  * 15 random vertical line segments
==> passed

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 6: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 7: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 8: random line segments, none vertical or horizontal
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments
  * 15 random line segments
==> passed

Test 9: random line segments
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments
  * 15 random line segments
==> passed

Test 10: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt
==> passed

Test 11: check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt
==> passed

Test 12: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 13: throws an exception if either the constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==> passed

Test 14: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 17/17 tests passed!


================================================================
Testing correctness of FastCollinearPoints
*-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
  * filename = equidistant.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (20000, 10000) -> (0, 30000)
    - reference segment 2: (30000, 0) -> (20000, 10000) -> (10000, 20000) -> (0, 30000)

    - number of entries in student   solution: 5
    - number of entries in reference solution: 4
    - 2 extra entries in student solution, including:
      '(20000, 10000) -> (0, 30000)'

    - 1 missing entry in student solution:
      '(30000, 0) -> (20000, 10000) -> (10000, 20000) -> (0, 30000)'


  * filename = input40.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 2: (1000, 17000) -> (17000, 17000)
    - reference segment 0: (1000, 17000) -> (13000, 17000) -> (17000, 17000) -> (29000, 17000)

    - number of entries in student   solution: 3
    - number of entries in reference solution: 4
    - 1 extra entry in student solution:
      '(1000, 17000) -> (17000, 17000)'

    - 2 missing entries in student solution, including:
      '(1000, 17000) -> (1000, 27000) -> (1000, 28000) -> (1000, 31000)'


  * filename = input48.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (1000, 26000) -> (11000, 26000)
    - reference segment 1: (1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)

    - number of entries in student   solution: 6
    - number of entries in reference solution: 6
    - 4 extra entries in student solution, including:
      '(5000, 29000) -> (23000, 29000)'

    - 4 missing entries in student solution, including:
      '(1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)'


  * filename = input299.txt
    - number of entries in student   solution: 4
    - number of entries in reference solution: 6
    - 2 missing entries in student solution, including:
      '(7300, 10050) -> (7300, 10450) -> (7300, 25700) -> (7300, 31650)'


==> FAILED

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (2682, 14118) -> (7453, 14118)
    - reference segment 4: (2682, 14118) -> (5067, 14118) -> (7453, 14118) -> (7821, 14118)

    - number of entries in student   solution: 5
    - number of entries in reference solution: 5
    - 2 extra entries in student solution, including:
      '(2682, 14118) -> (7453, 14118)'

    - 2 missing entries in student solution, including:
      '(2682, 14118) -> (5067, 14118) -> (7453, 14118) -> (7821, 14118)'


  * filename = horizontal25.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (8784, 20913) -> (16352, 20913)
    - reference segment 24: (8784, 20913) -> (9880, 20913) -> (16352, 20913) -> (19666, 20913)

    - number of entries in student   solution: 26
    - number of entries in reference solution: 25
    - 7 extra entries in student solution, including:
      '(8784, 20913) -> (16352, 20913)'

    - 6 missing entries in student solution, including:
      '(8784, 20913) -> (9880, 20913) -> (16352, 20913) -> (19666, 20913)'


  * filename = horizontal50.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (5249, 20754) -> (14800, 20754)
    - reference segment 49: (5249, 20754) -> (5559, 20754) -> (14800, 20754) -> (17428, 20754)

    - number of entries in student   solution: 51
    - number of entries in reference solution: 50
    - 6 extra entries in student solution, including:
      '(5249, 20754) -> (14800, 20754)'

    - 5 missing entries in student solution, including:
      '(5249, 20754) -> (5559, 20754) -> (14800, 20754) -> (17428, 20754)'


  * filename = horizontal75.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (1536, 20976) -> (14178, 20976)
    - reference segment 74: (1536, 20976) -> (6545, 20976) -> (14178, 20976) -> (14591, 20976)

    - number of entries in student   solution: 75
    - number of entries in reference solution: 75
    - 4 extra entries in student solution, including:
      '(1536, 20976) -> (14178, 20976)'

    - 4 missing entries in student solution, including:
      '(1536, 20976) -> (6545, 20976) -> (14178, 20976) -> (14591, 20976)'


  * filename = horizontal100.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (5835, 20698) -> (16154, 20698)
    - reference segment 99: (5835, 20698) -> (7673, 20698) -> (16154, 20698) -> (19642, 20698)

    - number of entries in student   solution: 101
    - number of entries in reference solution: 100
    - 7 extra entries in student solution, including:
      '(5835, 20698) -> (16154, 20698)'

    - 6 missing entries in student solution, including:
      '(5835, 20698) -> (7673, 20698) -> (16154, 20698) -> (19642, 20698)'


==> FAILED

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (2912, 16874) -> (4768, 16874)
    - reference segment 0: (2912, 16874) -> (3548, 16874) -> (4768, 16874) -> (12481, 16874)

    - number of entries in student   solution: 1
    - number of entries in reference solution: 1
    - 1 extra entry in student solution:
      '(2912, 16874) -> (4768, 16874)'

    - 1 missing entry in student solution:
      '(2912, 16874) -> (3548, 16874) -> (4768, 16874) -> (12481, 16874)'


    - failed on trial 1 of 500
     4
     12481 16874
      2912 16874
      3548 16874
      4768 16874

  *  5 random horizontal line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (2254, 11904) -> (6099, 11904)
    - reference segment 4: (2254, 11904) -> (4068, 11904) -> (6099, 11904) -> (11292, 11904)

    - number of entries in student   solution: 5
    - number of entries in reference solution: 5
    - 1 extra entry in student solution:
      '(2254, 11904) -> (6099, 11904)'

    - 1 missing entry in student solution:
      '(2254, 11904) -> (4068, 11904) -> (6099, 11904) -> (11292, 11904)'


    - failed on trial 1 of 250
     20
     13269  4245
      8420 10732
      2254 11904
      6055  4245
      2861 10445
     12972  7665
     11384 10445
     17311 10732
     18565  7665
      7344 10445
      8130  4245
     14452 10732
     11292 11904
      5013  7665
      6099 11904
      5534  4245
      7884 10732
     15432  7665
      4068 11904
     11105 10445

  * 10 random horizontal line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (4716, 19425) -> (11563, 19425)
    - reference segment 9: (4716, 19425) -> (7362, 19425) -> (11563, 19425) -> (18891, 19425)

    - number of entries in student   solution: 10
    - number of entries in reference solution: 10
    - 2 extra entries in student solution, including:
      '(4716, 19425) -> (11563, 19425)'

    - 2 missing entries in student solution, including:
      '(4716, 19425) -> (7362, 19425) -> (11563, 19425) -> (18891, 19425)'


    - failed on trial 1 of 50

  * 15 random horizontal line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (5244, 20485) -> (15173, 20485)
    - reference segment 14: (5244, 20485) -> (9224, 20485) -> (15173, 20485) -> (19985, 20485)

    - number of entries in student   solution: 15
    - number of entries in reference solution: 15
    - 4 extra entries in student solution, including:
      '(5244, 20485) -> (15173, 20485)'

    - 4 missing entries in student solution, including:
      '(5244, 20485) -> (9224, 20485) -> (15173, 20485) -> (19985, 20485)'


    - failed on trial 1 of 5

==> FAILED

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 5
    - 5 missing entries in student solution, including:
      '(14407, 10367) -> (14407, 17188) -> (14407, 17831) -> (14407, 19953)'


  * filename = vertical25.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 25
    - 25 missing entries in student solution, including:
      '(19953, 10489) -> (19953, 10688) -> (19953, 19299) -> (19953, 20439)'


  * filename = vertical50.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 50
    - 50 missing entries in student solution, including:
      '(5991, 15606) -> (5991, 20227) -> (5991, 20340) -> (5991, 20424)'


  * filename = vertical75.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 75
    - 75 missing entries in student solution, including:
      '(13780, 16365) -> (13780, 17494) -> (13780, 18253) -> (13780, 18908)'


  * filename = vertical100.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 100
    - 100 missing entries in student solution, including:
      '(15135, 15588) -> (15135, 17398) -> (15135, 19476) -> (15135, 20439)'


==> FAILED

Test 3b: random vertical line segments
  *  1 random vertical line segment
    - number of entries in student   solution: 0
    - number of entries in reference solution: 1
    - 1 missing entry in student solution:
      '(14843, 7595) -> (14843, 8660) -> (14843, 14947) -> (14843, 18528)'


    - failed on trial 1 of 500
     4
     14843 18528
     14843  8660
     14843  7595
     14843 14947

  *  5 random vertical line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 5
    - 5 missing entries in student solution, including:
      '(17126, 14266) -> (17126, 17924) -> (17126, 20101) -> (17126, 20750)'


    - failed on trial 1 of 250
     20
     17126 14266
     18904 13479
      5640 12301
      5640  5423
     18904  2043
      5896 18367
      1386 16082
      5896 16874
      5640 19304
     17126 20101
      1386 16117
     18904  3267
      5896  4491
     17126 17924
      1386 12935
     17126 20750
     18904  1977
      1386  2532
      5896  2807
      5640 13269

  * 10 random vertical line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 10
    - 10 missing entries in student solution, including:
      '(16475, 6770) -> (16475, 8055) -> (16475, 15356) -> (16475, 17106)'


    - failed on trial 1 of 50

  * 15 random vertical line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 15
    - 15 missing entries in student solution, including:
      '(5500, 15084) -> (5500, 15309) -> (5500, 15334) -> (5500, 20831)'


    - failed on trial 1 of 5

==> FAILED

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
  * filename = random91.txt
  * filename = random152.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5a: points from a file with 5 or more on some line segments
  * filename = input9.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (6000, 6000) -> (8000, 8000)
    - reference segment 0: (1000, 1000) -> (2000, 2000) -> (3000, 3000) -> (4000, 4000) -> (5000, 5000) -> (6000, 6000) -> (7000, 7000) -> (8000, 8000) -> (9000, 9000)

    - number of entries in student   solution: 6
    - number of entries in reference solution: 1
    - 6 extra entries in student solution, including:
      '(6000, 6000) -> (8000, 8000)'

    - 1 missing entry in student solution:
      '(1000, 1000) -> (2000, 2000) -> (3000, 3000) -> (4000, 4000) -> (5000, 5000) -> (6000, 6000) -> (7000, 7000) -> (8000, 8000) -> (9000, 9000)'


  * filename = input10.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (2000, 22000) -> (3500, 28000)
    - reference segment 1: (1000, 18000) -> (2000, 22000) -> (3000, 26000) -> (3500, 28000) -> (4000, 30000)

    - number of entries in student   solution: 3
    - number of entries in reference solution: 2
    - 2 extra entries in student solution, including:
      '(2000, 22000) -> (3500, 28000)'

    - 1 missing entry in student solution:
      '(1000, 18000) -> (2000, 22000) -> (3000, 26000) -> (3500, 28000) -> (4000, 30000)'


  * filename = input20.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (5120, 29184) -> (7168, 29184)
    - reference segment 2: (4160, 29184) -> (5120, 29184) -> (6144, 29184) -> (7168, 29184) -> (8192, 29184)

    - number of entries in student   solution: 5
    - number of entries in reference solution: 5
    - 5 extra entries in student solution, including:
      '(5120, 29184) -> (7168, 29184)'

    - 5 missing entries in student solution, including:
      '(4160, 29184) -> (5120, 29184) -> (6144, 29184) -> (7168, 29184) -> (8192, 29184)'


  * filename = input50.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 2: (1000, 26000) -> (11000, 26000)
    - reference segment 1: (1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)

    - number of entries in student   solution: 9
    - number of entries in reference solution: 7
    - 6 extra entries in student solution, including:
      '(17000, 30000) -> (24000, 30000)'

    - 4 missing entries in student solution, including:
      '(1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)'


  * filename = input80.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 3: (8000, 23000) -> (30000, 23000)
    - reference segment 10: (0, 23000) -> (8000, 23000) -> (21000, 23000) -> (26000, 23000) -> (30000, 23000)

    - number of entries in student   solution: 33
    - number of entries in reference solution: 31
    - 17 extra entries in student solution, including:
      '(0, 30000) -> (27000, 30000)'

    - 15 missing entries in student solution, including:
      '(0, 23000) -> (8000, 23000) -> (21000, 23000) -> (26000, 23000) -> (30000, 23000)'


  * filename = input300.txt
    - number of entries in student   solution: 4
    - number of entries in reference solution: 6
    - 2 missing entries in student solution, including:
      '(7300, 10050) -> (7300, 10450) -> (7300, 17000) -> (7300, 25700) -> (7300, 31650)'


  * filename = inarow.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (20000, 25000) -> (18000, 30000)
    - reference segment 0: (30000, 0) -> (27000, 7500) -> (26000, 10000) -> (20000, 25000) -> (19000, 27500) -> (18000, 30000)

    - number of entries in student   solution: 11
    - number of entries in reference solution: 5
    - 10 extra entries in student solution, including:
      '(20000, 25000) -> (18000, 30000)'

    - 4 missing entries in student solution, including:
      '(30000, 0) -> (27000, 7500) -> (26000, 10000) -> (20000, 25000) -> (19000, 27500) -> (18000, 30000)'


==> FAILED

Test 5b: points from a file with 5 or more on some line segments
  * filename = kw1260.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (13180, 30413) -> (14764, 30467)
    - reference segment 142: (12652, 30395) -> (13180, 30413) -> (13708, 30431) -> (14236, 30449) -> (14764, 30467)

    - number of entries in student   solution: 621
    - number of entries in reference solution: 288
    - 608 extra entries in student solution, including:
      '(13180, 30413) -> (14764, 30467)'

    - 275 missing entries in student solution, including:
      '(12652, 30395) -> (13180, 30413) -> (13708, 30431) -> (14236, 30449) -> (14764, 30467)'


  * filename = rs1423.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (13927, 27810) -> (13443, 28086)
    - reference segment 127: (14169, 27672) -> (13927, 27810) -> (13685, 27948) -> (13443, 28086)

    - number of entries in student   solution: 458
    - number of entries in reference solution: 443
    - 30 extra entries in student solution, including:
      '(13927, 27810) -> (13443, 28086)'

    - 15 missing entries in student solution, including:
      '(14169, 27672) -> (13927, 27810) -> (13685, 27948) -> (13443, 28086)'


==> FAILED

Test 6: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 7: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (20000, 10000) -> (0, 30000)
    - reference segment 2: (30000, 0) -> (20000, 10000) -> (10000, 20000) -> (0, 30000)

    - number of entries in student   solution: 5
    - number of entries in reference solution: 4
    - 2 extra entries in student solution, including:
      '(20000, 10000) -> (0, 30000)'

    - 1 missing entry in student solution:
      '(30000, 0) -> (20000, 10000) -> (10000, 20000) -> (0, 30000)'


  * filename = input40.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 2: (1000, 17000) -> (17000, 17000)
    - reference segment 0: (1000, 17000) -> (13000, 17000) -> (17000, 17000) -> (29000, 17000)

    - number of entries in student   solution: 3
    - number of entries in reference solution: 4
    - 1 extra entry in student solution:
      '(1000, 17000) -> (17000, 17000)'

    - 2 missing entries in student solution, including:
      '(1000, 17000) -> (1000, 27000) -> (1000, 28000) -> (1000, 31000)'


  * filename = input48.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (1000, 26000) -> (11000, 26000)
    - reference segment 1: (1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)

    - number of entries in student   solution: 6
    - number of entries in reference solution: 6
    - 4 extra entries in student solution, including:
      '(5000, 29000) -> (23000, 29000)'

    - 4 missing entries in student solution, including:
      '(1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)'


  * filename = input299.txt
    - number of entries in student   solution: 4
    - number of entries in reference solution: 6
    - 2 missing entries in student solution, including:
      '(7300, 10050) -> (7300, 10450) -> (7300, 25700) -> (7300, 31650)'


==> FAILED

Test 8: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (20000, 10000) -> (0, 30000)
    - reference segment 2: (30000, 0) -> (20000, 10000) -> (10000, 20000) -> (0, 30000)

    - number of entries in student   solution: 5
    - number of entries in reference solution: 4
    - 2 extra entries in student solution, including:
      '(20000, 10000) -> (0, 30000)'

    - 1 missing entry in student solution:
      '(30000, 0) -> (20000, 10000) -> (10000, 20000) -> (0, 30000)'


  * filename = input40.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 2: (1000, 17000) -> (17000, 17000)
    - reference segment 0: (1000, 17000) -> (13000, 17000) -> (17000, 17000) -> (29000, 17000)

    - number of entries in student   solution: 3
    - number of entries in reference solution: 4
    - 1 extra entry in student solution:
      '(1000, 17000) -> (17000, 17000)'

    - 2 missing entries in student solution, including:
      '(1000, 17000) -> (1000, 27000) -> (1000, 28000) -> (1000, 31000)'


  * filename = input48.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (1000, 26000) -> (11000, 26000)
    - reference segment 1: (1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)

    - number of entries in student   solution: 6
    - number of entries in reference solution: 6
    - 4 extra entries in student solution, including:
      '(5000, 29000) -> (23000, 29000)'

    - 4 missing entries in student solution, including:
      '(1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)'



It is bad style to write code that depends on the particular format of
the output from the toString() method, especially if your reason for
doing so is to circumvent the public API (which intentionally does not
provide access to the x- and y-coordinates).

==> FAILED

Test 9: random line segments, none vertical or horizontal
  *  1 random line segment
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (1843, 4704) -> (7266, 12580)
    - reference segment 0: (1843, 4704) -> (3815, 7568) -> (7266, 12580) -> (8745, 14728)

    - number of entries in student   solution: 1
    - number of entries in reference solution: 1
    - 1 extra entry in student solution:
      '(1843, 4704) -> (7266, 12580)'

    - 1 missing entry in student solution:
      '(1843, 4704) -> (3815, 7568) -> (7266, 12580) -> (8745, 14728)'


    - failed on trial 1 of 500
     4
      1843  4704
      3815  7568
      7266 12580
      8745 14728

  *  5 random line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (9289, 10724) -> (13227, 16312)
    - reference segment 1: (8931, 10216) -> (9289, 10724) -> (12153, 14788) -> (13227, 16312)

    - number of entries in student   solution: 6
    - number of entries in reference solution: 5
    - 2 extra entries in student solution, including:
      '(9289, 10724) -> (13227, 16312)'

    - 1 missing entry in student solution:
      '(8931, 10216) -> (9289, 10724) -> (12153, 14788) -> (13227, 16312)'


    - failed on trial 1 of 500
     20
      3516  4137
     15019  9225
     12474  5579
      7092  3327
     10380 12964
     12778  8995
     13931  3305
     12153 14788
      8808  7747
      7752  5027
      9289 10724
     13387   345
      9072  8427
      5100  6174
      8931 10216
     12322  3871
     12626  7287
      6156  7532
     13591  1455
     13227 16312

  * 25 random line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (6092, 13610) -> (8792, 13650)
    - reference segment 0: (4337, 13584) -> (6092, 13610) -> (7982, 13638) -> (8792, 13650)

    - number of entries in student   solution: 26
    - number of entries in reference solution: 25
    - 2 extra entries in student solution, including:
      '(6092, 13610) -> (8792, 13650)'

    - 1 missing entry in student solution:
      '(4337, 13584) -> (6092, 13610) -> (7982, 13638) -> (8792, 13650)'


    - failed on trial 19 of 100

  * 50 random line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (5124, 13184) -> (13444, 13200)
    - reference segment 0: (2524, 13179) -> (5124, 13184) -> (10844, 13195) -> (13444, 13200)

    - number of entries in student   solution: 51
    - number of entries in reference solution: 50
    - 2 extra entries in student solution, including:
      '(5124, 13184) -> (13444, 13200)'

    - 1 missing entry in student solution:
      '(2524, 13179) -> (5124, 13184) -> (10844, 13195) -> (13444, 13200)'


    - failed on trial 3 of 15

  * 100 random line segments
==> FAILED

Test 10: random line segments
  *  1 random line segment
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (5015, 6959) -> (6296, 7190)
    - reference segment 0: (5015, 6959) -> (5137, 6981) -> (6296, 7190) -> (8187, 7531)

    - number of entries in student   solution: 1
    - number of entries in reference solution: 1
    - 1 extra entry in student solution:
      '(5015, 6959) -> (6296, 7190)'

    - 1 missing entry in student solution:
      '(5015, 6959) -> (5137, 6981) -> (6296, 7190) -> (8187, 7531)'


    - failed on trial 1 of 500
     4
      5015  6959
      8187  7531
      6296  7190
      5137  6981

  *  5 random line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (3589, 11696) -> (6895, 12836)
    - reference segment 0: (3589, 11696) -> (3937, 11816) -> (6895, 12836) -> (8693, 13456)

    - number of entries in student   solution: 5
    - number of entries in reference solution: 5
    - 1 extra entry in student solution:
      '(3589, 11696) -> (6895, 12836)'

    - 1 missing entry in student solution:
      '(3589, 11696) -> (3937, 11816) -> (6895, 12836) -> (8693, 13456)'


    - failed on trial 1 of 500
     20
     12406  5286
      3589 11696
     11791  5793
     12591  7553
      3937 11816
      8335  9488
     11200  3990
     12551  7465
      8803  9929
     14719  6013
     10155 11203
     10259 11301
     13031  8521
     14159  5446
      9860  2550
     10195  2910
     11359  2611
     14639  5932
      8693 13456
      6895 12836

  * 25 random line segments
    - number of entries in student   solution: 19
    - number of entries in reference solution: 25
    - 6 missing entries in student solution, including:
      '(9260, 10270) -> (9260, 10608) -> (9260, 10842) -> (9260, 12558)'


    - failed on trial 1 of 100

  * 50 random line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (6750, 14966) -> (8814, 14966)
    - reference segment 2: (6750, 14966) -> (7782, 14966) -> (8814, 14966) -> (11652, 14966)

    - number of entries in student   solution: 44
    - number of entries in reference solution: 50
    - 1 extra entry in student solution:
      '(6750, 14966) -> (8814, 14966)'

    - 7 missing entries in student solution, including:
      '(6750, 14966) -> (7782, 14966) -> (8814, 14966) -> (11652, 14966)'


    - failed on trial 1 of 15

  * 100 random line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (4053, 14892) -> (7581, 14892)
    - reference segment 7: (4053, 14892) -> (6861, 14892) -> (7581, 14892) -> (7797, 14892)

    - number of entries in student   solution: 93
    - number of entries in reference solution: 100
    - 3 extra entries in student solution, including:
      '(4053, 14892) -> (7581, 14892)'

    - 10 missing entries in student solution, including:
      '(4053, 14892) -> (6861, 14892) -> (7581, 14892) -> (7797, 14892)'


    - failed on trial 1 of 2

==> FAILED

Test 11: random distinct points in a given range
  * 5 random points in a 10-by-10 grid
    - number of entries in student   solution: 1
    - number of entries in reference solution: 0
    - 1 extra entry in student solution:
      '(3, 3) -> (0, 9)'


    - failed on trial 3 of 500
     5
         0     9
         1     7
         6     6
         8     2
         3     3

  * 10 random points in a 10-by-10 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (5, 3) -> (0, 8)
    - reference segment 0: (6, 2) -> (5, 3) -> (2, 6) -> (0, 8)

    - number of entries in student   solution: 3
    - number of entries in reference solution: 1
    - 3 extra entries in student solution, including:
      '(5, 3) -> (0, 8)'

    - 1 missing entry in student solution:
      '(6, 2) -> (5, 3) -> (2, 6) -> (0, 8)'


    - failed on trial 3 of 500
     10
         8     5
         9     2
         6     2
         7     3
         0     8
         2     6
         0     3
         5     3
         6     9
         3     2

  * 50 random points in a 10-by-10 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (6, 9) -> (8, 9)
    - reference segment 24: (0, 9) -> (1, 9) -> (2, 9) -> (6, 9) -> (7, 9) -> (8, 9) -> (9, 9)

    - number of entries in student   solution: 58
    - number of entries in reference solution: 40
    - 43 extra entries in student solution, including:
      '(6, 9) -> (8, 9)'

    - 25 missing entries in student solution, including:
      '(0, 9) -> (1, 9) -> (2, 9) -> (6, 9) -> (7, 9) -> (8, 9) -> (9, 9)'


    - failed on trial 1 of 100

  * 90 random points in a 10-by-10 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (6, 9) -> (8, 9)
    - reference segment 59: (0, 9) -> (1, 9) -> (2, 9) -> (3, 9) -> (4, 9) -> (5, 9) -> (6, 9) -> (7, 9) -> (8, 9) -> (9, 9)

    - number of entries in student   solution: 241
    - number of entries in reference solution: 123
    - 182 extra entries in student solution, including:
      '(6, 9) -> (8, 9)'

    - 64 missing entries in student solution, including:
      '(0, 9) -> (1, 9) -> (2, 9) -> (3, 9) -> (4, 9) -> (5, 9) -> (6, 9) -> (7, 9) -> (8, 9) -> (9, 9)'


    - failed on trial 1 of 50

  * 200 random points in a 50-by-50 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (42, 47) -> (49, 47)
    - reference segment 106: (12, 47) -> (14, 47) -> (42, 47) -> (43, 47) -> (46, 47) -> (49, 47)

    - number of entries in student   solution: 338
    - number of entries in reference solution: 248
    - 186 extra entries in student solution, including:
      '(42, 47) -> (49, 47)'

    - 96 missing entries in student solution, including:
      '(12, 47) -> (14, 47) -> (42, 47) -> (43, 47) -> (46, 47) -> (49, 47)'


    - failed on trial 1 of 10

==> FAILED

Test 12: m*n points on an m-by-n grid
  * 3-by-3 grid
    - number of entries in student   solution: 2
    - number of entries in reference solution: 0
    - 2 extra entries in student solution, including:
      '(0, 1) -> (2, 1)'


  * 4-by-4 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (0, 3) -> (2, 3)
    - reference segment 4: (0, 3) -> (1, 3) -> (2, 3) -> (3, 3)

    - number of entries in student   solution: 6
    - number of entries in reference solution: 10
    - 4 extra entries in student solution, including:
      '(0, 3) -> (2, 3)'

    - 8 missing entries in student solution, including:
      '(0, 3) -> (1, 3) -> (2, 3) -> (3, 3)'


  * 5-by-5 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (1, 4) -> (3, 4)
    - reference segment 7: (0, 4) -> (1, 4) -> (2, 4) -> (3, 4) -> (4, 4)

    - number of entries in student   solution: 18
    - number of entries in reference solution: 16
    - 14 extra entries in student solution, including:
      '(1, 4) -> (3, 4)'

    - 12 missing entries in student solution, including:
      '(0, 4) -> (1, 4) -> (2, 4) -> (3, 4) -> (4, 4)'


  * 10-by-10 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (6, 9) -> (8, 9)
    - reference segment 76: (0, 9) -> (1, 9) -> (2, 9) -> (3, 9) -> (4, 9) -> (5, 9) -> (6, 9) -> (7, 9) -> (8, 9) -> (9, 9)

    - number of entries in student   solution: 324
    - number of entries in reference solution: 154
    - 260 extra entries in student solution, including:
      '(6, 9) -> (8, 9)'

    - 90 missing entries in student solution, including:
      '(0, 9) -> (1, 9) -> (2, 9) -> (3, 9) -> (4, 9) -> (5, 9) -> (6, 9) -> (7, 9) -> (8, 9) -> (9, 9)'


  * 20-by-20 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (16, 19) -> (18, 19)
    - reference segment 1222: (0, 19) -> (1, 19) -> (2, 19) -> (3, 19) -> (4, 19) -> (5, 19) -> (6, 19) -> (7, 19) -> (8, 19) -> (9, 19) -> (10, 19) -> (11, 19) -> (12, 19) -> (13, 19) -> (14, 19) -> (15, 19) -> (16, 19) -> (17, 19) -> (18, 19) -> (19, 19)

    - number of entries in student   solution: 5306
    - number of entries in reference solution: 2446
    - 3910 extra entries in student solution, including:
      '(16, 19) -> (18, 19)'

    - 1050 missing entries in student solution, including:
      '(0, 19) -> (1, 19) -> (2, 19) -> (3, 19) -> (4, 19) -> (5, 19) -> (6, 19) -> (7, 19) -> (8, 19) -> (9, 19) -> (10, 19) -> (11, 19) -> (12, 19) -> (13, 19) -> (14, 19) -> (15, 19) -> (16, 19) -> (17, 19) -> (18, 19) -> (19, 19)'


  * 5-by-4 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (1, 3) -> (3, 3)
    - reference segment 5: (0, 3) -> (1, 3) -> (2, 3) -> (3, 3) -> (4, 3)

    - number of entries in student   solution: 12
    - number of entries in reference solution: 13
    - 8 extra entries in student solution, including:
      '(1, 3) -> (3, 3)'

    - 9 missing entries in student solution, including:
      '(0, 3) -> (1, 3) -> (2, 3) -> (3, 3) -> (4, 3)'


  * 6-by-4 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (2, 3) -> (4, 3)
    - reference segment 6: (0, 3) -> (1, 3) -> (2, 3) -> (3, 3) -> (4, 3) -> (5, 3)

    - number of entries in student   solution: 18
    - number of entries in reference solution: 16
    - 12 extra entries in student solution, including:
      '(2, 3) -> (4, 3)'

    - 10 missing entries in student solution, including:
      '(0, 3) -> (1, 3) -> (2, 3) -> (3, 3) -> (4, 3) -> (5, 3)'


  * 10-by-4 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (6, 3) -> (8, 3)
    - reference segment 15: (0, 3) -> (1, 3) -> (2, 3) -> (3, 3) -> (4, 3) -> (5, 3) -> (6, 3) -> (7, 3) -> (8, 3) -> (9, 3)

    - number of entries in student   solution: 52
    - number of entries in reference solution: 38
    - 28 extra entries in student solution, including:
      '(6, 3) -> (8, 3)'

    - 14 missing entries in student solution, including:
      '(0, 3) -> (1, 3) -> (2, 3) -> (3, 3) -> (4, 3) -> (5, 3) -> (6, 3) -> (7, 3) -> (8, 3) -> (9, 3)'


  * 15-by-4 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (11, 3) -> (13, 3)
    - reference segment 33: (0, 3) -> (1, 3) -> (2, 3) -> (3, 3) -> (4, 3) -> (5, 3) -> (6, 3) -> (7, 3) -> (8, 3) -> (9, 3) -> (10, 3) -> (11, 3) -> (12, 3) -> (13, 3) -> (14, 3)

    - number of entries in student   solution: 108
    - number of entries in reference solution: 79
    - 48 extra entries in student solution, including:
      '(11, 3) -> (13, 3)'

    - 19 missing entries in student solution, including:
      '(0, 3) -> (1, 3) -> (2, 3) -> (3, 3) -> (4, 3) -> (5, 3) -> (6, 3) -> (7, 3) -> (8, 3) -> (9, 3) -> (10, 3) -> (11, 3) -> (12, 3) -> (13, 3) -> (14, 3)'


  * 25-by-4 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (21, 3) -> (23, 3)
    - reference segment 95: (0, 3) -> (1, 3) -> (2, 3) -> (3, 3) -> (4, 3) -> (5, 3) -> (6, 3) -> (7, 3) -> (8, 3) -> (9, 3) -> (10, 3) -> (11, 3) -> (12, 3) -> (13, 3) -> (14, 3) -> (15, 3) -> (16, 3) -> (17, 3) -> (18, 3) -> (19, 3) -> (20, 3) -> (21, 3) -> (22, 3) -> (23, 3) -> (24, 3)

    - number of entries in student   solution: 272
    - number of entries in reference solution: 213
    - 88 extra entries in student solution, including:
      '(21, 3) -> (23, 3)'

    - 29 missing entries in student solution, including:
      '(0, 3) -> (1, 3) -> (2, 3) -> (3, 3) -> (4, 3) -> (5, 3) -> (6, 3) -> (7, 3) -> (8, 3) -> (9, 3) -> (10, 3) -> (11, 3) -> (12, 3) -> (13, 3) -> (14, 3) -> (15, 3) -> (16, 3) -> (17, 3) -> (18, 3) -> (19, 3) -> (20, 3) -> (21, 3) -> (22, 3) -> (23, 3) -> (24, 3)'


==> FAILED

Test 13: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt
==> passed

Test 14: check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt
==> passed

Test 15: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 16: throws an exception if either constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==> passed

Test 17: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 8/21 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point
*-----------------------------------------------------------
Running 1 total tests.

The maximum amount of memory per Point object is 32 bytes.

Student memory = 24 bytes (passed)

Total: 1/1 tests passed!

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing BruteCollinearPoints
*-----------------------------------------------------------
Running 10 total tests.

Test 1a-1e: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.01         680           0            680                   63
=> passed    32   0.00        5456           0           5456                  154
=> passed    64   0.00       43680           0          43680                  369
=> passed   128   0.01      349504           0         349504                  871
=> passed   256   0.05     2796337           0        2796337                 1994
==> 5/5 tests passed

Test 2a-2e: Find collinear points among n/4 arbitrary line segments


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.00         780           0            780                   59
=> passed    32   0.00        5858           0           5858                  155
=> passed    64   0.00       45122           0          45122                  372
=> passed   128   0.00      355914           0         355914                  864
=> passed   256   0.04     2822808           0        2822808                 1999
==> 5/5 tests passed

Total: 10/10 tests passed!


================================================================



Timing FastCollinearPoints
*-----------------------------------------------------------
Running 31 total tests.

Test 1a-1g: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.01        2074        7889          17852                  367
=> passed   128   0.01        8250       39052          86354                  864
=> passed   256   0.02       32890      187003         406896                 1999
=> passed   512   0.10      131322      869075        1869472                 4478
=> passed  1024   0.27      524794     3959412        8443618                 9975
=> passed  2048   0.45     2098170    17830889       37759948                22027
==> 6/6 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (37759948 / 8443618) = 2.16
=> passed

==> 7/7 tests passed

Test 2a-2g: Find collinear points among the n points on an n-by-1 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00        2074        1952           5978                  371
=> passed   128   0.00        8250        8000          24250                  862
=> passed   256   0.00       32890       32384          97658                 1987
=> passed   512   0.01      131322      130304         391930                 4479
=> passed  1024   0.02      524794      522752        1570298                 9996
=> passed  2048   0.04     2098170     2094080        6286330                22014
=> passed  4096   0.16     8390650     8382464       25155578                48133
==> 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (25155578 / 6286330) = 2.00
=> passed

==> 8/8 tests passed

Test 3a-3g: Find collinear points among the n points on an n/4-by-4 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00        2074        6975          16024                  368
=> passed   128   0.00        8250       26476          61202                  870
=> passed   256   0.00       32890       69827         172544                 1962
=> passed   512   0.01      131322      245903         623128                 4491
=> passed  1024   0.03      524794      927949        2380692                 9989
=> passed  2048   0.11     2098170     3607526        9313222                22010
=> passed  4096   0.38     8390650    14220881       36832412                48155
==> 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (36832412 / 9313222) = 1.98
=> passed

==> 8/8 tests passed

Test 4a-4g: Find collinear points among the n points on an n/8-by-8 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00        2074        7700          17474                  365
=> passed   128   0.00        8250       35865          79980                  868
=> passed   256   0.00       32890      127119         287128                 1992
=> passed   512   0.01      131322      385257         901836                 4503
=> passed  1024   0.03      524794     1438625        3402044                 9986
=> passed  2048   0.15     2098170     5568216       13234602                22036
=> passed  4096   0.42     8390650    21899885       52190420                48116
==> 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (52190420 / 13234602) = 1.98
=> passed

==> 8/8 tests passed

Total: 31/31 tests passed!


================================================================
