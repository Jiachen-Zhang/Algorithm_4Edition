See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     PASSED
PMD:          FAILED (2 warnings)
Checkstyle:   FAILED (0 errors, 9 warnings)

Correctness:  26/41 tests passed
Memory:       1/1 tests passed
Timing:       41/41 tests passed

Aggregate score: 78.05%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
2.1K Jan 25 09:05 BruteCollinearPoints.java
2.1K Jan 25 09:05 FastCollinearPoints.java
4.5K Jan 25 09:05 Point.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac Point.java
*-----------------------------------------------------------

% javac BruteCollinearPoints.java
*-----------------------------------------------------------

% javac FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Point:

BruteCollinearPoints:

FastCollinearPoints:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------


================================================================


% pmd .
*-----------------------------------------------------------
BruteCollinearPoints.java:6: The private instance (or static) variable 'stack' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
FastCollinearPoints.java:6: The private instance (or static) variable 'stack' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PMD ends with 2 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] BruteCollinearPoints.java:38:20: Do not use the letter 'l' as a local variable name. It is hard to distinguish from the number '1'. [LocalVariableName]
[WARN] Point.java:2:8: Unused import statement for 'edu.princeton.cs.algs4.In'. [UnusedImports]
[WARN] Point.java:3:8: Unused import statement for 'edu.princeton.cs.algs4.Insertion'. [UnusedImports]
[WARN] Point.java:4:8: Unused import statement for 'edu.princeton.cs.algs4.Out'. [UnusedImports]
[WARN] Point.java:6:8: Unused import statement for 'edu.princeton.cs.algs4.StdOut'. [UnusedImports]
[WARN] Point.java:7:8: Unused import statement for 'java.util.Arrays'. [UnusedImports]
Checkstyle ends with 0 errors and 6 warnings.

% custom checkstyle checks for Point.java
*-----------------------------------------------------------

% custom checkstyle checks for BruteCollinearPoints.java
*-----------------------------------------------------------
[WARN] BruteCollinearPoints.java:35:51: The numeric literal '1e-6' appears to be unnecessary. [NumericLiteral]
[WARN] BruteCollinearPoints.java:40:53: The numeric literal '1e-6' appears to be unnecessary. [NumericLiteral]
Checkstyle ends with 0 errors and 2 warnings.

% custom checkstyle checks for FastCollinearPoints.java
*-----------------------------------------------------------
[WARN] FastCollinearPoints.java:41:45: The numeric literal '1e-6' appears to be unnecessary. [NumericLiteral]
Checkstyle ends with 0 errors and 1 warning.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Point
*-----------------------------------------------------------
Running 3 total tests.

Test 1: p.slopeTo(q)
  * positive infinite slope, where p and q have coordinates in [0, 500)
  * positive infinite slope, where p and q have coordinates in [0, 32768)
  * negative infinite slope, where p and q have coordinates in [0, 500)
  * negative infinite slope, where p and q have coordinates in [0, 32768)
  * positive zero     slope, where p and q have coordinates in [0, 500)
  * positive zero     slope, where p and q have coordinates in [0, 32768)
  * symmetric for random points p and q with coordinates in [0, 500)
  * symmetric for random points p and q with coordinates in [0, 32768)
  * transitive for random points p, q, and r with coordinates in [0, 500)
  * transitive for random points p, q, and r with coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 500)
  * slopeTo(), where p and q have coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 10)
  * throw a java.lang.NullPointerException if argument is null
==> passed

Test 2: p.compareTo(q)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p and q have coordinates in [0, 500)
  * antisymmetric, where p and q have coordinates in [0, 32768)
  * transitive, where p, q, and r have coordinates in [0, 500)
  * transitive, where p, q, and r have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 500)
  * sign of compareTo(), where p and q have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 10)
  * throw java.lang.NullPointerException exception if argument is null
==> passed

Test 3: p.slopeOrder().compare(q, r)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p, q, and r have coordinates in [0, 500)
  * antisymmetric, where p, q, and r have coordinates in [0, 32768)
  * transitive, where p, q, r, and s have coordinates in [0, 500)
  * transitive, where p, q, r, and s have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 500)
  * sign of compare(), where p, q, and r have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 10)
  * throw java.lang.NullPointerException if either argument is null
==> passed


Total: 3/3 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Point and LineSegment)
********************************************************************************

Testing correctness of BruteCollinearPoints
*-----------------------------------------------------------
Running 17 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
  * filename = horizontal25.txt
==> passed

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
  *  5 random horizontal line segments
  * 10 random horizontal line segments
  * 15 random horizontal line segments
==> passed

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
  * filename = vertical25.txt
==> passed

Test 3b: random vertical line segments
  *  1 random vertical line segment
  *  5 random vertical line segments
  * 10 random vertical line segments
  * 15 random vertical line segments
==> passed

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 6: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 7: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 8: random line segments, none vertical or horizontal
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments
  * 15 random line segments
==> passed

Test 9: random line segments
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments
  * 15 random line segments
==> passed

Test 10: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt
==> passed

Test 11: check that data type does not mutate the constructor argument
  * input8.txt
    - data type mutated the points[] array
    - data type should have no side effects unless documented in API

  * equidistant.txt
    - data type mutated the points[] array
    - data type should have no side effects unless documented in API

==> FAILED

Test 12: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 13: throws an exception if either the constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==> passed

Test 14: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 16/17 tests passed!


================================================================
Testing correctness of FastCollinearPoints
*-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
  * filename = equidistant.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (20000, 10000) -> (0, 30000)
    - reference segment 2: (30000, 0) -> (20000, 10000) -> (10000, 20000) -> (0, 30000)

    - number of entries in student   solution: 5
    - number of entries in reference solution: 4
    - 2 extra entries in student solution, including:
      '(20000, 10000) -> (0, 30000)'

    - 1 missing entry in student solution:
      '(30000, 0) -> (20000, 10000) -> (10000, 20000) -> (0, 30000)'


  * filename = input40.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 2: (1000, 17000) -> (17000, 17000)
    - reference segment 0: (1000, 17000) -> (13000, 17000) -> (17000, 17000) -> (29000, 17000)

    - number of entries in student   solution: 3
    - number of entries in reference solution: 4
    - 1 extra entry in student solution:
      '(1000, 17000) -> (17000, 17000)'

    - 2 missing entries in student solution, including:
      '(1000, 17000) -> (1000, 27000) -> (1000, 28000) -> (1000, 31000)'


  * filename = input48.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (1000, 26000) -> (11000, 26000)
    - reference segment 1: (1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)

    - number of entries in student   solution: 6
    - number of entries in reference solution: 6
    - 4 extra entries in student solution, including:
      '(5000, 29000) -> (23000, 29000)'

    - 4 missing entries in student solution, including:
      '(1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)'


  * filename = input299.txt
    - number of entries in student   solution: 4
    - number of entries in reference solution: 6
    - 2 missing entries in student solution, including:
      '(7300, 10050) -> (7300, 10450) -> (7300, 25700) -> (7300, 31650)'


==> FAILED

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (2682, 14118) -> (7453, 14118)
    - reference segment 4: (2682, 14118) -> (5067, 14118) -> (7453, 14118) -> (7821, 14118)

    - number of entries in student   solution: 5
    - number of entries in reference solution: 5
    - 2 extra entries in student solution, including:
      '(2682, 14118) -> (7453, 14118)'

    - 2 missing entries in student solution, including:
      '(2682, 14118) -> (5067, 14118) -> (7453, 14118) -> (7821, 14118)'


  * filename = horizontal25.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (8784, 20913) -> (16352, 20913)
    - reference segment 24: (8784, 20913) -> (9880, 20913) -> (16352, 20913) -> (19666, 20913)

    - number of entries in student   solution: 26
    - number of entries in reference solution: 25
    - 7 extra entries in student solution, including:
      '(8784, 20913) -> (16352, 20913)'

    - 6 missing entries in student solution, including:
      '(8784, 20913) -> (9880, 20913) -> (16352, 20913) -> (19666, 20913)'


  * filename = horizontal50.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (5249, 20754) -> (14800, 20754)
    - reference segment 49: (5249, 20754) -> (5559, 20754) -> (14800, 20754) -> (17428, 20754)

    - number of entries in student   solution: 51
    - number of entries in reference solution: 50
    - 6 extra entries in student solution, including:
      '(5249, 20754) -> (14800, 20754)'

    - 5 missing entries in student solution, including:
      '(5249, 20754) -> (5559, 20754) -> (14800, 20754) -> (17428, 20754)'


  * filename = horizontal75.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (1536, 20976) -> (14178, 20976)
    - reference segment 74: (1536, 20976) -> (6545, 20976) -> (14178, 20976) -> (14591, 20976)

    - number of entries in student   solution: 75
    - number of entries in reference solution: 75
    - 4 extra entries in student solution, including:
      '(1536, 20976) -> (14178, 20976)'

    - 4 missing entries in student solution, including:
      '(1536, 20976) -> (6545, 20976) -> (14178, 20976) -> (14591, 20976)'


  * filename = horizontal100.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (5835, 20698) -> (16154, 20698)
    - reference segment 99: (5835, 20698) -> (7673, 20698) -> (16154, 20698) -> (19642, 20698)

    - number of entries in student   solution: 101
    - number of entries in reference solution: 100
    - 7 extra entries in student solution, including:
      '(5835, 20698) -> (16154, 20698)'

    - 6 missing entries in student solution, including:
      '(5835, 20698) -> (7673, 20698) -> (16154, 20698) -> (19642, 20698)'


==> FAILED

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (3163, 5585) -> (10399, 5585)
    - reference segment 0: (3163, 5585) -> (9922, 5585) -> (10399, 5585) -> (14556, 5585)

    - number of entries in student   solution: 1
    - number of entries in reference solution: 1
    - 1 extra entry in student solution:
      '(3163, 5585) -> (10399, 5585)'

    - 1 missing entry in student solution:
      '(3163, 5585) -> (9922, 5585) -> (10399, 5585) -> (14556, 5585)'


    - failed on trial 1 of 500
     4
      3163  5585
     14556  5585
     10399  5585
      9922  5585

  *  5 random horizontal line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (3818, 16451) -> (15041, 16451)
    - reference segment 4: (3818, 16451) -> (7271, 16451) -> (15041, 16451) -> (15162, 16451)

    - number of entries in student   solution: 5
    - number of entries in reference solution: 5
    - 1 extra entry in student solution:
      '(3818, 16451) -> (15041, 16451)'

    - 1 missing entry in student solution:
      '(3818, 16451) -> (7271, 16451) -> (15041, 16451) -> (15162, 16451)'


    - failed on trial 1 of 250
     20
      7783 10356
      7271 16451
      6806 10356
     11756  6808
      9032  9902
      7120 13974
     15162 16451
      3818 16451
      8964 10356
     16318  9902
      4748  9902
     10518 13974
     14927  6808
      4990 13974
     15041 16451
     13787  6808
     13657  9902
      7644 10356
     16902  6808
     11985 13974

  * 10 random horizontal line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (4501, 20771) -> (14511, 20771)
    - reference segment 9: (4501, 20771) -> (9243, 20771) -> (14511, 20771) -> (15368, 20771)

    - number of entries in student   solution: 10
    - number of entries in reference solution: 10
    - 4 extra entries in student solution, including:
      '(4501, 20771) -> (14511, 20771)'

    - 4 missing entries in student solution, including:
      '(4501, 20771) -> (9243, 20771) -> (14511, 20771) -> (15368, 20771)'


    - failed on trial 1 of 50

  * 15 random horizontal line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (5134, 20842) -> (7056, 20842)
    - reference segment 14: (5134, 20842) -> (5737, 20842) -> (7056, 20842) -> (16228, 20842)

    - number of entries in student   solution: 16
    - number of entries in reference solution: 15
    - 5 extra entries in student solution, including:
      '(5134, 20842) -> (7056, 20842)'

    - 4 missing entries in student solution, including:
      '(5134, 20842) -> (5737, 20842) -> (7056, 20842) -> (16228, 20842)'


    - failed on trial 1 of 5

==> FAILED

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 5
    - 5 missing entries in student solution, including:
      '(14407, 10367) -> (14407, 17188) -> (14407, 17831) -> (14407, 19953)'


  * filename = vertical25.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 25
    - 25 missing entries in student solution, including:
      '(19953, 10489) -> (19953, 10688) -> (19953, 19299) -> (19953, 20439)'


  * filename = vertical50.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 50
    - 50 missing entries in student solution, including:
      '(5991, 15606) -> (5991, 20227) -> (5991, 20340) -> (5991, 20424)'


  * filename = vertical75.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 75
    - 75 missing entries in student solution, including:
      '(13780, 16365) -> (13780, 17494) -> (13780, 18253) -> (13780, 18908)'


  * filename = vertical100.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 100
    - 100 missing entries in student solution, including:
      '(15135, 15588) -> (15135, 17398) -> (15135, 19476) -> (15135, 20439)'


==> FAILED

Test 3b: random vertical line segments
  *  1 random vertical line segment
    - number of entries in student   solution: 0
    - number of entries in reference solution: 1
    - 1 missing entry in student solution:
      '(20588, 5326) -> (20588, 8394) -> (20588, 13145) -> (20588, 13366)'


    - failed on trial 1 of 500
     4
     20588  5326
     20588  8394
     20588 13145
     20588 13366

  *  5 random vertical line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 5
    - 5 missing entries in student solution, including:
      '(6342, 7540) -> (6342, 10617) -> (6342, 12131) -> (6342, 12729)'


    - failed on trial 1 of 250
     20
      6342 12729
     10312 11847
      4101  2606
     10312  3718
      8223  5988
      8223 16379
     10312  3121
      8223  9772
      4101 12307
     19883  9139
     19883  5861
      6342 12131
     19883  8978
      4101  7422
      4101 11165
      6342  7540
     10312  4353
      6342 10617
      8223  3379
     19883 17043

  * 10 random vertical line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 10
    - 10 missing entries in student solution, including:
      '(5352, 10310) -> (5352, 12547) -> (5352, 14859) -> (5352, 20499)'


    - failed on trial 1 of 50

  * 15 random vertical line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 15
    - 15 missing entries in student solution, including:
      '(4381, 18186) -> (4381, 18578) -> (4381, 19101) -> (4381, 20358)'


    - failed on trial 1 of 5

==> FAILED

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
  * filename = random91.txt
  * filename = random152.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5a: points from a file with 5 or more on some line segments
  * filename = input9.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (6000, 6000) -> (8000, 8000)
    - reference segment 0: (1000, 1000) -> (2000, 2000) -> (3000, 3000) -> (4000, 4000) -> (5000, 5000) -> (6000, 6000) -> (7000, 7000) -> (8000, 8000) -> (9000, 9000)

    - number of entries in student   solution: 6
    - number of entries in reference solution: 1
    - 6 extra entries in student solution, including:
      '(6000, 6000) -> (8000, 8000)'

    - 1 missing entry in student solution:
      '(1000, 1000) -> (2000, 2000) -> (3000, 3000) -> (4000, 4000) -> (5000, 5000) -> (6000, 6000) -> (7000, 7000) -> (8000, 8000) -> (9000, 9000)'


  * filename = input10.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (2000, 22000) -> (3500, 28000)
    - reference segment 1: (1000, 18000) -> (2000, 22000) -> (3000, 26000) -> (3500, 28000) -> (4000, 30000)

    - number of entries in student   solution: 3
    - number of entries in reference solution: 2
    - 2 extra entries in student solution, including:
      '(2000, 22000) -> (3500, 28000)'

    - 1 missing entry in student solution:
      '(1000, 18000) -> (2000, 22000) -> (3000, 26000) -> (3500, 28000) -> (4000, 30000)'


  * filename = input20.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (5120, 29184) -> (7168, 29184)
    - reference segment 2: (4160, 29184) -> (5120, 29184) -> (6144, 29184) -> (7168, 29184) -> (8192, 29184)

    - number of entries in student   solution: 5
    - number of entries in reference solution: 5
    - 5 extra entries in student solution, including:
      '(5120, 29184) -> (7168, 29184)'

    - 5 missing entries in student solution, including:
      '(4160, 29184) -> (5120, 29184) -> (6144, 29184) -> (7168, 29184) -> (8192, 29184)'


  * filename = input50.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 2: (1000, 26000) -> (11000, 26000)
    - reference segment 1: (1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)

    - number of entries in student   solution: 9
    - number of entries in reference solution: 7
    - 6 extra entries in student solution, including:
      '(17000, 30000) -> (24000, 30000)'

    - 4 missing entries in student solution, including:
      '(1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)'


  * filename = input80.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 3: (8000, 23000) -> (30000, 23000)
    - reference segment 10: (0, 23000) -> (8000, 23000) -> (21000, 23000) -> (26000, 23000) -> (30000, 23000)

    - number of entries in student   solution: 33
    - number of entries in reference solution: 31
    - 17 extra entries in student solution, including:
      '(0, 30000) -> (27000, 30000)'

    - 15 missing entries in student solution, including:
      '(0, 23000) -> (8000, 23000) -> (21000, 23000) -> (26000, 23000) -> (30000, 23000)'


  * filename = input300.txt
    - number of entries in student   solution: 4
    - number of entries in reference solution: 6
    - 2 missing entries in student solution, including:
      '(7300, 10050) -> (7300, 10450) -> (7300, 17000) -> (7300, 25700) -> (7300, 31650)'


  * filename = inarow.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (20000, 25000) -> (18000, 30000)
    - reference segment 0: (30000, 0) -> (27000, 7500) -> (26000, 10000) -> (20000, 25000) -> (19000, 27500) -> (18000, 30000)

    - number of entries in student   solution: 11
    - number of entries in reference solution: 5
    - 10 extra entries in student solution, including:
      '(20000, 25000) -> (18000, 30000)'

    - 4 missing entries in student solution, including:
      '(30000, 0) -> (27000, 7500) -> (26000, 10000) -> (20000, 25000) -> (19000, 27500) -> (18000, 30000)'


==> FAILED

Test 5b: points from a file with 5 or more on some line segments
  * filename = kw1260.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (13180, 30413) -> (14764, 30467)
    - reference segment 142: (12652, 30395) -> (13180, 30413) -> (13708, 30431) -> (14236, 30449) -> (14764, 30467)

    - number of entries in student   solution: 621
    - number of entries in reference solution: 288
    - 608 extra entries in student solution, including:
      '(13180, 30413) -> (14764, 30467)'

    - 275 missing entries in student solution, including:
      '(12652, 30395) -> (13180, 30413) -> (13708, 30431) -> (14236, 30449) -> (14764, 30467)'


  * filename = rs1423.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (13927, 27810) -> (13443, 28086)
    - reference segment 127: (14169, 27672) -> (13927, 27810) -> (13685, 27948) -> (13443, 28086)

    - number of entries in student   solution: 458
    - number of entries in reference solution: 443
    - 30 extra entries in student solution, including:
      '(13927, 27810) -> (13443, 28086)'

    - 15 missing entries in student solution, including:
      '(14169, 27672) -> (13927, 27810) -> (13685, 27948) -> (13443, 28086)'


==> FAILED

Test 6: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 7: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (20000, 10000) -> (0, 30000)
    - reference segment 2: (30000, 0) -> (20000, 10000) -> (10000, 20000) -> (0, 30000)

    - number of entries in student   solution: 5
    - number of entries in reference solution: 4
    - 2 extra entries in student solution, including:
      '(20000, 10000) -> (0, 30000)'

    - 1 missing entry in student solution:
      '(30000, 0) -> (20000, 10000) -> (10000, 20000) -> (0, 30000)'


  * filename = input40.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 2: (1000, 17000) -> (17000, 17000)
    - reference segment 0: (1000, 17000) -> (13000, 17000) -> (17000, 17000) -> (29000, 17000)

    - number of entries in student   solution: 3
    - number of entries in reference solution: 4
    - 1 extra entry in student solution:
      '(1000, 17000) -> (17000, 17000)'

    - 2 missing entries in student solution, including:
      '(1000, 17000) -> (1000, 27000) -> (1000, 28000) -> (1000, 31000)'


  * filename = input48.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (1000, 26000) -> (11000, 26000)
    - reference segment 1: (1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)

    - number of entries in student   solution: 6
    - number of entries in reference solution: 6
    - 4 extra entries in student solution, including:
      '(5000, 29000) -> (23000, 29000)'

    - 4 missing entries in student solution, including:
      '(1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)'


  * filename = input299.txt
    - number of entries in student   solution: 4
    - number of entries in reference solution: 6
    - 2 missing entries in student solution, including:
      '(7300, 10050) -> (7300, 10450) -> (7300, 25700) -> (7300, 31650)'


==> FAILED

Test 8: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (20000, 10000) -> (0, 30000)
    - reference segment 2: (30000, 0) -> (20000, 10000) -> (10000, 20000) -> (0, 30000)

    - number of entries in student   solution: 5
    - number of entries in reference solution: 4
    - 2 extra entries in student solution, including:
      '(20000, 10000) -> (0, 30000)'

    - 1 missing entry in student solution:
      '(30000, 0) -> (20000, 10000) -> (10000, 20000) -> (0, 30000)'


  * filename = input40.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 2: (1000, 17000) -> (17000, 17000)
    - reference segment 0: (1000, 17000) -> (13000, 17000) -> (17000, 17000) -> (29000, 17000)

    - number of entries in student   solution: 3
    - number of entries in reference solution: 4
    - 1 extra entry in student solution:
      '(1000, 17000) -> (17000, 17000)'

    - 2 missing entries in student solution, including:
      '(1000, 17000) -> (1000, 27000) -> (1000, 28000) -> (1000, 31000)'


  * filename = input48.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (1000, 26000) -> (11000, 26000)
    - reference segment 1: (1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)

    - number of entries in student   solution: 6
    - number of entries in reference solution: 6
    - 4 extra entries in student solution, including:
      '(5000, 29000) -> (23000, 29000)'

    - 4 missing entries in student solution, including:
      '(1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)'



It is bad style to write code that depends on the particular format of
the output from the toString() method, especially if your reason for
doing so is to circumvent the public API (which intentionally does not
provide access to the x- and y-coordinates).

==> FAILED

Test 9: random line segments, none vertical or horizontal
  *  1 random line segment
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (11936, 6459) -> (13466, 10379)
    - reference segment 0: (11936, 6459) -> (12242, 7243) -> (13466, 10379) -> (15608, 15867)

    - number of entries in student   solution: 1
    - number of entries in reference solution: 1
    - 1 extra entry in student solution:
      '(11936, 6459) -> (13466, 10379)'

    - 1 missing entry in student solution:
      '(11936, 6459) -> (12242, 7243) -> (13466, 10379) -> (15608, 15867)'


    - failed on trial 1 of 500
     4
     12242  7243
     15608 15867
     13466 10379
     11936  6459

  *  5 random line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 2: (2070, 4080) -> (11880, 5754)
    - reference segment 0: (2070, 4080) -> (5340, 4638) -> (11880, 5754) -> (13515, 6033)

    - number of entries in student   solution: 5
    - number of entries in reference solution: 5
    - 1 extra entry in student solution:
      '(2070, 4080) -> (11880, 5754)'

    - 1 missing entry in student solution:
      '(2070, 4080) -> (5340, 4638) -> (11880, 5754) -> (13515, 6033)'


    - failed on trial 6 of 500
     20
      9999   411
      5617  8880
     10935  8511
      8061  7101
     11871 16611
      5816 12971
     11013  9186
      2070  4080
      2273  1052
     13515  6033
      4737  6820
      8917  7739
      6054 14165
     15337 12524
      4341  5893
     11880  5754
      5578 11777
      5102  9389
      5340  4638
     10201  8696

  * 25 random line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (1778, 11543) -> (11930, 11555)
    - reference segment 0: (932, 11542) -> (1778, 11543) -> (11084, 11554) -> (11930, 11555)

    - number of entries in student   solution: 26
    - number of entries in reference solution: 25
    - 2 extra entries in student solution, including:
      '(1778, 11543) -> (11930, 11555)'

    - 1 missing entry in student solution:
      '(932, 11542) -> (1778, 11543) -> (11084, 11554) -> (11930, 11555)'


    - failed on trial 1 of 100

  * 50 random line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 12: (77, 8204) -> (5509, 8276)
    - reference segment 0: (77, 8204) -> (4830, 8267) -> (5509, 8276) -> (8225, 8312)

    - number of entries in student   solution: 50
    - number of entries in reference solution: 50
    - 1 extra entry in student solution:
      '(77, 8204) -> (5509, 8276)'

    - 1 missing entry in student solution:
      '(77, 8204) -> (4830, 8267) -> (5509, 8276) -> (8225, 8312)'


    - failed on trial 13 of 15

  * 100 random line segments
==> FAILED

Test 10: random line segments
  *  1 random line segment
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (7706, 8922) -> (8525, 8922)
    - reference segment 0: (7706, 8922) -> (7811, 8922) -> (8525, 8922) -> (9113, 8922)

    - number of entries in student   solution: 1
    - number of entries in reference solution: 1
    - 1 extra entry in student solution:
      '(7706, 8922) -> (8525, 8922)'

    - 1 missing entry in student solution:
      '(7706, 8922) -> (7811, 8922) -> (8525, 8922) -> (9113, 8922)'


    - failed on trial 1 of 500
     4
      8525  8922
      7706  8922
      9113  8922
      7811  8922

  *  5 random line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (8511, 10287) -> (11031, 10602)
    - reference segment 1: (8511, 10287) -> (8751, 10317) -> (11031, 10602) -> (11711, 10687)

    - number of entries in student   solution: 4
    - number of entries in reference solution: 5
    - 1 extra entry in student solution:
      '(8511, 10287) -> (11031, 10602)'

    - 2 missing entries in student solution, including:
      '(8511, 10287) -> (8751, 10317) -> (11031, 10602) -> (11711, 10687)'


    - failed on trial 2 of 500
     20
     11031 10602
     10332  9916
      8667  7621
     11854  8377
      5327  6326
      8751 10317
     14670  8735
      7436  7769
      9740  9100
     14294  8377
     11711 10687
     12854  8377
     14670  8723
      3788  5273
     14670  8879
      8511 10287
     12334  8377
      8593  7519
      2591  4454
     14670  8627

  * 25 random line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 11: (2770, 5687) -> (8566, 5687)
    - reference segment 0: (2034, 5687) -> (2770, 5687) -> (4886, 5687) -> (8566, 5687)

    - number of entries in student   solution: 22
    - number of entries in reference solution: 25
    - 2 extra entries in student solution, including:
      '(2770, 5687) -> (8566, 5687)'

    - 5 missing entries in student solution, including:
      '(11122, 7414) -> (11122, 7606) -> (11122, 7654) -> (11122, 8026)'


    - failed on trial 1 of 100

  * 50 random line segments
    - number of entries in student   solution: 40
    - number of entries in reference solution: 50
    - 10 missing entries in student solution, including:
      '(8570, 12715) -> (8570, 12880) -> (8570, 13420) -> (8570, 13750)'


    - failed on trial 1 of 15

  * 100 random line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 4: (4774, 12924) -> (7294, 12924)
    - reference segment 6: (2110, 12924) -> (4774, 12924) -> (5782, 12924) -> (7294, 12924)

    - number of entries in student   solution: 94
    - number of entries in reference solution: 100
    - 3 extra entries in student solution, including:
      '(4774, 12924) -> (7294, 12924)'

    - 9 missing entries in student solution, including:
      '(2110, 12924) -> (4774, 12924) -> (5782, 12924) -> (7294, 12924)'


    - failed on trial 1 of 2

==> FAILED

Test 11: random distinct points in a given range
  * 5 random points in a 10-by-10 grid
    - number of entries in student   solution: 1
    - number of entries in reference solution: 0
    - 1 extra entry in student solution:
      '(5, 5) -> (8, 5)'


    - failed on trial 11 of 500
     5
         8     8
         8     5
         7     5
         5     5
         6     2

  * 10 random points in a 10-by-10 grid
    - number of entries in student   solution: 0
    - number of entries in reference solution: 1
    - 1 missing entry in student solution:
      '(0, 0) -> (0, 4) -> (0, 8) -> (0, 9)'


    - failed on trial 4 of 500
     10
         3     0
         0     9
         2     8
         8     9
         0     8
         3     6
         4     9
         0     4
         5     7
         0     0

  * 50 random points in a 10-by-10 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (4, 7) -> (9, 7)
    - reference segment 20: (1, 7) -> (2, 7) -> (4, 7) -> (5, 7) -> (7, 7) -> (9, 7)

    - number of entries in student   solution: 70
    - number of entries in reference solution: 49
    - 45 extra entries in student solution, including:
      '(4, 7) -> (0, 9)'

    - 24 missing entries in student solution, including:
      '(1, 7) -> (2, 7) -> (4, 7) -> (5, 7) -> (7, 7) -> (9, 7)'


    - failed on trial 1 of 100

  * 90 random points in a 10-by-10 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (5, 9) -> (7, 9)
    - reference segment 65: (0, 9) -> (1, 9) -> (2, 9) -> (4, 9) -> (5, 9) -> (6, 9) -> (7, 9) -> (9, 9)

    - number of entries in student   solution: 253
    - number of entries in reference solution: 132
    - 185 extra entries in student solution, including:
      '(5, 9) -> (7, 9)'

    - 64 missing entries in student solution, including:
      '(0, 9) -> (1, 9) -> (2, 9) -> (4, 9) -> (5, 9) -> (6, 9) -> (7, 9) -> (9, 9)'


    - failed on trial 1 of 50

  * 200 random points in a 50-by-50 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (12, 48) -> (49, 48)
    - reference segment 111: (3, 48) -> (6, 48) -> (12, 48) -> (14, 48) -> (35, 48) -> (49, 48)

    - number of entries in student   solution: 320
    - number of entries in reference solution: 221
    - 194 extra entries in student solution, including:
      '(12, 48) -> (49, 48)'

    - 95 missing entries in student solution, including:
      '(3, 48) -> (6, 48) -> (12, 48) -> (14, 48) -> (35, 48) -> (49, 48)'


    - failed on trial 1 of 10

==> FAILED

Test 12: m*n points on an m-by-n grid
  * 3-by-3 grid
    - number of entries in student   solution: 2
    - number of entries in reference solution: 0
    - 2 extra entries in student solution, including:
      '(0, 1) -> (2, 1)'


  * 4-by-4 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (0, 3) -> (2, 3)
    - reference segment 4: (0, 3) -> (1, 3) -> (2, 3) -> (3, 3)

    - number of entries in student   solution: 6
    - number of entries in reference solution: 10
    - 4 extra entries in student solution, including:
      '(0, 3) -> (2, 3)'

    - 8 missing entries in student solution, including:
      '(0, 3) -> (1, 3) -> (2, 3) -> (3, 3)'


  * 5-by-5 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (1, 4) -> (3, 4)
    - reference segment 7: (0, 4) -> (1, 4) -> (2, 4) -> (3, 4) -> (4, 4)

    - number of entries in student   solution: 18
    - number of entries in reference solution: 16
    - 14 extra entries in student solution, including:
      '(1, 4) -> (3, 4)'

    - 12 missing entries in student solution, including:
      '(0, 4) -> (1, 4) -> (2, 4) -> (3, 4) -> (4, 4)'


  * 10-by-10 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (6, 9) -> (8, 9)
    - reference segment 76: (0, 9) -> (1, 9) -> (2, 9) -> (3, 9) -> (4, 9) -> (5, 9) -> (6, 9) -> (7, 9) -> (8, 9) -> (9, 9)

    - number of entries in student   solution: 324
    - number of entries in reference solution: 154
    - 260 extra entries in student solution, including:
      '(6, 9) -> (8, 9)'

    - 90 missing entries in student solution, including:
      '(0, 9) -> (1, 9) -> (2, 9) -> (3, 9) -> (4, 9) -> (5, 9) -> (6, 9) -> (7, 9) -> (8, 9) -> (9, 9)'


  * 20-by-20 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (16, 19) -> (18, 19)
    - reference segment 1222: (0, 19) -> (1, 19) -> (2, 19) -> (3, 19) -> (4, 19) -> (5, 19) -> (6, 19) -> (7, 19) -> (8, 19) -> (9, 19) -> (10, 19) -> (11, 19) -> (12, 19) -> (13, 19) -> (14, 19) -> (15, 19) -> (16, 19) -> (17, 19) -> (18, 19) -> (19, 19)

    - number of entries in student   solution: 5306
    - number of entries in reference solution: 2446
    - 3910 extra entries in student solution, including:
      '(16, 19) -> (18, 19)'

    - 1050 missing entries in student solution, including:
      '(0, 19) -> (1, 19) -> (2, 19) -> (3, 19) -> (4, 19) -> (5, 19) -> (6, 19) -> (7, 19) -> (8, 19) -> (9, 19) -> (10, 19) -> (11, 19) -> (12, 19) -> (13, 19) -> (14, 19) -> (15, 19) -> (16, 19) -> (17, 19) -> (18, 19) -> (19, 19)'


  * 5-by-4 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (1, 3) -> (3, 3)
    - reference segment 5: (0, 3) -> (1, 3) -> (2, 3) -> (3, 3) -> (4, 3)

    - number of entries in student   solution: 12
    - number of entries in reference solution: 13
    - 8 extra entries in student solution, including:
      '(1, 3) -> (3, 3)'

    - 9 missing entries in student solution, including:
      '(0, 3) -> (1, 3) -> (2, 3) -> (3, 3) -> (4, 3)'


  * 6-by-4 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (2, 3) -> (4, 3)
    - reference segment 6: (0, 3) -> (1, 3) -> (2, 3) -> (3, 3) -> (4, 3) -> (5, 3)

    - number of entries in student   solution: 18
    - number of entries in reference solution: 16
    - 12 extra entries in student solution, including:
      '(2, 3) -> (4, 3)'

    - 10 missing entries in student solution, including:
      '(0, 3) -> (1, 3) -> (2, 3) -> (3, 3) -> (4, 3) -> (5, 3)'


  * 10-by-4 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (6, 3) -> (8, 3)
    - reference segment 15: (0, 3) -> (1, 3) -> (2, 3) -> (3, 3) -> (4, 3) -> (5, 3) -> (6, 3) -> (7, 3) -> (8, 3) -> (9, 3)

    - number of entries in student   solution: 52
    - number of entries in reference solution: 38
    - 28 extra entries in student solution, including:
      '(6, 3) -> (8, 3)'

    - 14 missing entries in student solution, including:
      '(0, 3) -> (1, 3) -> (2, 3) -> (3, 3) -> (4, 3) -> (5, 3) -> (6, 3) -> (7, 3) -> (8, 3) -> (9, 3)'


  * 15-by-4 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (11, 3) -> (13, 3)
    - reference segment 33: (0, 3) -> (1, 3) -> (2, 3) -> (3, 3) -> (4, 3) -> (5, 3) -> (6, 3) -> (7, 3) -> (8, 3) -> (9, 3) -> (10, 3) -> (11, 3) -> (12, 3) -> (13, 3) -> (14, 3)

    - number of entries in student   solution: 108
    - number of entries in reference solution: 79
    - 48 extra entries in student solution, including:
      '(11, 3) -> (13, 3)'

    - 19 missing entries in student solution, including:
      '(0, 3) -> (1, 3) -> (2, 3) -> (3, 3) -> (4, 3) -> (5, 3) -> (6, 3) -> (7, 3) -> (8, 3) -> (9, 3) -> (10, 3) -> (11, 3) -> (12, 3) -> (13, 3) -> (14, 3)'


  * 25-by-4 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (21, 3) -> (23, 3)
    - reference segment 95: (0, 3) -> (1, 3) -> (2, 3) -> (3, 3) -> (4, 3) -> (5, 3) -> (6, 3) -> (7, 3) -> (8, 3) -> (9, 3) -> (10, 3) -> (11, 3) -> (12, 3) -> (13, 3) -> (14, 3) -> (15, 3) -> (16, 3) -> (17, 3) -> (18, 3) -> (19, 3) -> (20, 3) -> (21, 3) -> (22, 3) -> (23, 3) -> (24, 3)

    - number of entries in student   solution: 272
    - number of entries in reference solution: 213
    - 88 extra entries in student solution, including:
      '(21, 3) -> (23, 3)'

    - 29 missing entries in student solution, including:
      '(0, 3) -> (1, 3) -> (2, 3) -> (3, 3) -> (4, 3) -> (5, 3) -> (6, 3) -> (7, 3) -> (8, 3) -> (9, 3) -> (10, 3) -> (11, 3) -> (12, 3) -> (13, 3) -> (14, 3) -> (15, 3) -> (16, 3) -> (17, 3) -> (18, 3) -> (19, 3) -> (20, 3) -> (21, 3) -> (22, 3) -> (23, 3) -> (24, 3)'


==> FAILED

Test 13: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt
==> passed

Test 14: check that data type does not mutate the constructor argument
  * input8.txt
    - data type mutated the points[] array
    - data type should have no side effects unless documented in API

  * equidistant.txt
    - data type mutated the points[] array
    - data type should have no side effects unless documented in API

==> FAILED

Test 15: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 16: throws an exception if either constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==> passed

Test 17: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 7/21 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point
*-----------------------------------------------------------
Running 1 total tests.

The maximum amount of memory per Point object is 32 bytes.

Student memory = 24 bytes (passed)

Total: 1/1 tests passed!

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing BruteCollinearPoints
*-----------------------------------------------------------
Running 10 total tests.

Test 1a-1e: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.01         680           0            680                   61
=> passed    32   0.00        5456           0           5456                  149
=> passed    64   0.00       43680           0          43680                  368
=> passed   128   0.01      349504           0         349504                  858
=> passed   256   0.05     2796160           0        2796160                 1992
==> 5/5 tests passed

Test 2a-2e: Find collinear points among n/4 arbitrary line segments


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.00         772           0            772                   58
=> passed    32   0.00        5749           0           5749                  153
=> passed    64   0.00       45137           0          45137                  364
=> passed   128   0.00      356212           0         356212                  865
=> passed   256   0.03     2823217           0        2823217                 1978
==> 5/5 tests passed

Total: 10/10 tests passed!


================================================================



Timing FastCollinearPoints
*-----------------------------------------------------------
Running 31 total tests.

Test 1a-1g: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.01        2074        8042          18158                  373
=> passed   128   0.01        8250       39473          87196                  863
=> passed   256   0.02       32890      187547         407984                 1987
=> passed   512   0.09      131322      868407        1868136                 4495
=> passed  1024   0.26      524794     3961365        8447524                 9994
=> passed  2048   0.47     2098170    17817669       37733508                22053
==> 6/6 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (37733508 / 8447524) = 2.16
=> passed

==> 7/7 tests passed

Test 2a-2g: Find collinear points among the n points on an n-by-1 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00        2074        1952           5978                  368
=> passed   128   0.00        8250        8000          24250                  872
=> passed   256   0.00       32890       32384          97658                 1971
=> passed   512   0.00      131322      130304         391930                 4474
=> passed  1024   0.02      524794      522752        1570298                 9983
=> passed  2048   0.09     2098170     2094080        6286330                22021
=> passed  4096   0.13     8390650     8382464       25155578                48126
==> 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (25155578 / 6286330) = 2.00
=> passed

==> 8/8 tests passed

Test 3a-3g: Find collinear points among the n points on an n/4-by-4 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00        2074        6975          16024                  372
=> passed   128   0.00        8250       26476          61202                  870
=> passed   256   0.01       32890       69827         172544                 1997
=> passed   512   0.01      131322      245903         623128                 4490
=> passed  1024   0.04      524794      927949        2380692                 9985
=> passed  2048   0.11     2098170     3607526        9313222                22034
=> passed  4096   0.37     8390650    14220881       36832412                48159
==> 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (36832412 / 9313222) = 1.98
=> passed

==> 8/8 tests passed

Test 4a-4g: Find collinear points among the n points on an n/8-by-8 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00        2074        7700          17474                  375
=> passed   128   0.00        8250       35865          79980                  863
=> passed   256   0.00       32890      127119         287128                 1984
=> passed   512   0.01      131322      385257         901836                 4474
=> passed  1024   0.03      524794     1438625        3402044                 9974
=> passed  2048   0.13     2098170     5568216       13234602                22047
=> passed  4096   0.42     8390650    21899885       52190420                48084
==> 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (52190420 / 13234602) = 1.98
=> passed

==> 8/8 tests passed

Total: 31/31 tests passed!


================================================================
